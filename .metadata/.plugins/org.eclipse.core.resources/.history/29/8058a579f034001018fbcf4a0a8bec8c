#include "spi.h"



#define SPI1EN			(1U<<12)
#define GPIOAEN			(1U<<0)
#define GPIOBEN			(1U<<1)

#define SR_TXE			(1U<<1)
#define SR_RXNE			(1U<<0)

#define SR_BSY			(1U<<7)


//PA5 -> CLK
//PA6 -> MISO
//PA7 -> MOSI

//PA9 -> Slave Select


void spi_gpio_init(void)
{
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
	RCC->AHB1ENR |= GPIOBEN;

	/*Set PA5,PA6,PA7 mode to alternate function*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
	GPIOA->MODER |=(1U<<11);

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
	GPIOA->MODER |=(1U<<13);

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
	GPIOA->MODER |=(1U<<15);


	/*Set PB6 CS*/
	GPIOB ->MODER |=(1U<<12);
	GPIOB->MODER &=~(1U<<13);

	/*Set PB1 as output pin*/
	GPIOB->MODER |=(1U<<2);
	GPIOB->MODER &=~(1U<<3);

	/*Set PB2 as output pin*/
	GPIOB->MODER |=(1U<<4);
	GPIOB->MODER &=~(1U<<5);


	/*Set PA5,PA6,PA7 alternate function type to SPI1*/
	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
	GPIOA->AFR[0] &= ~(1U<<21);
	GPIOA->AFR[0] |=(1U<<22);
	GPIOA->AFR[0] &= ~(1U<<23);

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
	GPIOA->AFR[0] &= ~(1U<<25);
	GPIOA->AFR[0] |=(1U<<26);
	GPIOA->AFR[0] &= ~(1U<<27);

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
	GPIOA->AFR[0] &= ~(1U<<29);
	GPIOA->AFR[0] |=(1U<<30);
	GPIOA->AFR[0] &= ~(1U<<31);

	cs_disable();    // PB0 = 1
	dc_disable();    // PB1 = 1 (data, but idle = command mode until first cmd)



}

void spi1_config(void)
{
    /* 1) enable SPI1 peripheral clock */
    RCC->APB2ENR |= SPI1EN;

    /*
     CR1 fields we want:
       – BR[2:0] = 010  → fPCLK/4
       – MSTR   = 1    → master mode
       – CPOL   = 1    → idle SCK high
       – CPHA   = 1    → sample on rising edge
       – SSM    = 1    → software slave‑management
       – SSI    = 1    → internal “NSS” high
       – DFF    = 0    → 8‑bit data frame
       – LSBFIRST = 0  → MSB first
       – BIDIMODE=0,RXONLY=0 → 2‑line full‑duplex
    */
    SPI1->CR1 =
        (1U<<4)   /* BR1=1, BR[2]=0, BR0=0 → /4 */   |
        (1U<<2)   /* MSTR   */                     |
        (1U<<1)   /* CPOL   */                     |
        (1U<<0)   /* CPHA   */                     |
        (1U<<9)   /* SSI    */                     |
        (1U<<8);  /* SSM    */

    /* 2) enable SPI now that CR1 is set */
    SPI1->CR1 |= (1U<<6);  /* SPE = 1 */
}

void spi1_transmit(uint8_t *data,uint32_t size)
{
	uint32_t i=0;
	uint8_t temp;

	while(i<size)
	{
		/*Wait until TXE is set*/
		while(!(SPI1->SR & (SR_TXE))){}

		/*Write the data to the data register*/
		SPI1->DR = data[i];
		i++;
	}
	/*Wait until TXE is set*/
	while(!(SPI1->SR & (SR_TXE))){}

	/*Wait for BUSY flag to reset*/
	while((SPI1->SR & (SR_BSY))){}

	/*Clear OVR flag*/
	temp = SPI1->DR;
	temp = SPI1->SR;
}

void spi1_receive(uint8_t *data, uint32_t size)
{
	while(size)
	{
		/*Send dummy data*/
		SPI1->DR =0;

		/*Wait for RXNE flag to be set*/
		while(!(SPI1->SR & (SR_RXNE))){}

		/*Read data from data register*/
		*data++ = (SPI1->DR);
		size--;
	}
}

/*LCD is active low*/
void cs_enable(void)
{
	GPIOB->ODR &=~(1U<<6);
}

/*Pull high to disable*/
void cs_disable(void)
{
	GPIOB->ODR |=(1U<<6);
}

void dc_enable(void)
{
	GPIOB->ODR &=~(1U<<1);
}

void dc_disable(void)
{
	GPIOB->ODR |=(1U<<1);
}

void rst_enable(void)
{
	GPIOB->ODR &=~(1U<<2);
}

void rst_disable(void)
{
	GPIOB->ODR |=(1U<<2);
}



