#include <stdint.h>

static void lcd_cmd(uint8_t cmd)
{
	dc_enable();
	cs_enable();
	spi1_transmit(&cmd,1);
	cs_disable();
}

static void lcd_data(uint8_t *data, size_t len)
{
	dc_disable();
	cs_enable();
	spi1_transmit(data,len);
	cs_disable();

}

void lcd_init(void) {
  spi_gpio_init();
  spi1_config();
  rst_enable();
  rst_disable();

  // 1) Software reset
  lcd_cmd(0x01);


  // 2) Sleep out
  lcd_cmd(0x11);


  // 3) Frame rate & inversion (example)
  lcd_cmd(0xB1);
    uint8_t fr1[] = {0x01,0x2C,0x2D};
  lcd_data(fr1, sizeof(fr1));

  lcd_cmd(0xB2);
    uint8_t fr2[] = {0x01,0x2C,0x2D};
  lcd_data(fr2, sizeof(fr2));

  // 4) Set color mode to 16‑bit
  lcd_cmd(0x3A);
    uint8_t colmod = 0x05;       // 16‑bit/pixel
  lcd_data(&colmod,1);

  // 5) Memory access control (MADCTL) – orientation
  lcd_cmd(0x36);
    uint8_t madctl = 0x00;       // row/col order, RGB/BGR
  lcd_data(&madctl,1);

  // 6) Display on
  lcd_cmd(0x29);

}


void lcd_set_window(uint16_t x0, uint16_t y0,
                    uint16_t x1, uint16_t y1)
{
  // column address set (0x2A)
  lcd_cmd(0x2A);
    uint8_t cols[] = {
      x0 >> 8, x0 & 0xFF,
      x1 >> 8, x1 & 0xFF
    };
  lcd_data(cols,4);

  // row address set (0x2B)
  lcd_cmd(0x2B);
    uint8_t rows[] = {
      y0 >> 8, y0 & 0xFF,
      y1 >> 8, y1 & 0xFF
    };
  lcd_data(rows,4);

  // next SPI data will go to memory write
  lcd_cmd(0x2C);
}

