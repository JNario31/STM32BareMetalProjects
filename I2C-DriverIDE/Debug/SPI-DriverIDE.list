
SPI-DriverIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001550  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08001720  08001720  00002720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001764  08001764  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001764  08001764  00002764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800176c  0800176c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800176c  0800176c  0000276c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001770  08001770  00002770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001774  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080017d0  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080017d0  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000013d4  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006ee  00000000  00000000  00004460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00004b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000135  00000000  00000000  00004d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa10  00000000  00000000  00004e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000263c  00000000  00000000  0001f85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090904  00000000  00000000  00021e99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b279d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cfc  00000000  00000000  000b27e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b34dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000005c 	.word	0x2000005c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001708 	.word	0x08001708

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000060 	.word	0x20000060
 800020c:	08001708 	.word	0x08001708

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <adxl_read>:
 * PA9(SS)    ------ CS
 * GND        ------ GND
 * 5V+        ------ VCC
 * */
void adxl_read(uint8_t address, uint8_t * rxdata)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	6039      	str	r1, [r7, #0]
 80002ba:	71fb      	strb	r3, [r7, #7]

	  /*Set read operation*/
	  address |= ADXL345_READ_OPERATION;
 80002bc:	79fb      	ldrb	r3, [r7, #7]
 80002be:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	71fb      	strb	r3, [r7, #7]

	  /*Enable multi-byte*/
	  address |= ADXL345_MULTI_BYTE_ENABLE;
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002cc:	b2db      	uxtb	r3, r3
 80002ce:	71fb      	strb	r3, [r7, #7]

	  /*Pull cs line low to enable slave*/
	  cs_enable();
 80002d0:	f000 f96a 	bl	80005a8 <cs_enable>

      /*Send address*/
	  spi1_transmit(&address,1);
 80002d4:	1dfb      	adds	r3, r7, #7
 80002d6:	2101      	movs	r1, #1
 80002d8:	4618      	mov	r0, r3
 80002da:	f000 f907 	bl	80004ec <spi1_transmit>

	  /*Read 6 bytes */
	  spi1_receive(rxdata,6);
 80002de:	2106      	movs	r1, #6
 80002e0:	6838      	ldr	r0, [r7, #0]
 80002e2:	f000 f93b 	bl	800055c <spi1_receive>

	  /*Pull cs line high to disable slave*/
	  cs_disable();
 80002e6:	f000 f96f 	bl	80005c8 <cs_disable>

}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
	...

080002f4 <adxl_write>:

void adxl_write (uint8_t address, uint8_t value)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b084      	sub	sp, #16
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	460a      	mov	r2, r1
 80002fe:	71fb      	strb	r3, [r7, #7]
 8000300:	4613      	mov	r3, r2
 8000302:	71bb      	strb	r3, [r7, #6]
  uint8_t data[2];

  /*Enable multi-byte, place address into buffer*/
  data[0] = address|ADXL345_MULTI_BYTE_ENABLE;
 8000304:	79fb      	ldrb	r3, [r7, #7]
 8000306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800030a:	b2db      	uxtb	r3, r3
 800030c:	733b      	strb	r3, [r7, #12]

  /*Place data into buffer*/
  data[1] = value;
 800030e:	79bb      	ldrb	r3, [r7, #6]
 8000310:	737b      	strb	r3, [r7, #13]

  /*Pull cs line low to enable slave*/
  cs_enable();
 8000312:	f000 f949 	bl	80005a8 <cs_enable>

  /*Transmit data and address*/
  spi1_transmit(data, 2);
 8000316:	f107 030c 	add.w	r3, r7, #12
 800031a:	2102      	movs	r1, #2
 800031c:	4618      	mov	r0, r3
 800031e:	f000 f8e5 	bl	80004ec <spi1_transmit>

  for (volatile int i = 0; i < 200000; i++);  // ~2 ms hold
 8000322:	2300      	movs	r3, #0
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	e002      	b.n	800032e <adxl_write+0x3a>
 8000328:	68bb      	ldr	r3, [r7, #8]
 800032a:	3301      	adds	r3, #1
 800032c:	60bb      	str	r3, [r7, #8]
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	4a04      	ldr	r2, [pc, #16]	@ (8000344 <adxl_write+0x50>)
 8000332:	4293      	cmp	r3, r2
 8000334:	ddf8      	ble.n	8000328 <adxl_write+0x34>

  /*Pull cs line high to disable slave*/
  cs_disable();
 8000336:	f000 f947 	bl	80005c8 <cs_disable>


}
 800033a:	bf00      	nop
 800033c:	3710      	adds	r7, #16
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	00030d3f 	.word	0x00030d3f

08000348 <adxl_init>:

void adxl_init (void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	/*Enable SPI gpio*/
	spi_gpio_init();
 800034c:	f000 f828 	bl	80003a0 <spi_gpio_init>

	cs_disable();
 8000350:	f000 f93a 	bl	80005c8 <cs_disable>

	/*Config SPI*/
	spi1_config();
 8000354:	f000 f8ae 	bl	80004b4 <spi1_config>

	/*Set data format range to +-4g*/
	adxl_write (ADXL345_REG_DATA_FORMAT, ADXL345_RANGE_4G);
 8000358:	2101      	movs	r1, #1
 800035a:	2031      	movs	r0, #49	@ 0x31
 800035c:	f7ff ffca 	bl	80002f4 <adxl_write>

	/*Reset all bits*/
	adxl_write (ADXL345_REG_POWER_CTL, ADXL345_RESET);
 8000360:	2100      	movs	r1, #0
 8000362:	202d      	movs	r0, #45	@ 0x2d
 8000364:	f7ff ffc6 	bl	80002f4 <adxl_write>

	/*Configure power control measure bit*/
	adxl_write (ADXL345_REG_POWER_CTL, ADXL345_MEASURE_BIT);
 8000368:	2108      	movs	r1, #8
 800036a:	202d      	movs	r0, #45	@ 0x2d
 800036c:	f7ff ffc2 	bl	80002f4 <adxl_write>
}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}

08000374 <main>:
double accel_x_g, accel_y_g, accel_z_g;

uint8_t data_buffer[6];

int main(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0


	uart_init();
 800037a:	f000 f9e5 	bl	8000748 <uart_init>

    // Initialize the ADXL345 accelerometer
    adxl_init();
 800037e:	f7ff ffe3 	bl	8000348 <adxl_init>

    uint8_t id;
    adxl_read(ADXL345_REG_DEVID, &id);
 8000382:	1dfb      	adds	r3, r7, #7
 8000384:	4619      	mov	r1, r3
 8000386:	2000      	movs	r0, #0
 8000388:	f7ff ff92 	bl	80002b0 <adxl_read>
    printf("DEVID = 0x%02X\n", id);
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	4619      	mov	r1, r3
 8000390:	4802      	ldr	r0, [pc, #8]	@ (800039c <main+0x28>)
 8000392:	f000 fb4f 	bl	8000a34 <iprintf>


    while (1)
 8000396:	bf00      	nop
 8000398:	e7fd      	b.n	8000396 <main+0x22>
 800039a:	bf00      	nop
 800039c:	08001720 	.word	0x08001720

080003a0 <spi_gpio_init>:

//PA9 -> Slave Select


void spi_gpio_init(void)
{
 80003a0:	b480      	push	{r7}
 80003a2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80003a4:	4b41      	ldr	r3, [pc, #260]	@ (80004ac <spi_gpio_init+0x10c>)
 80003a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a8:	4a40      	ldr	r2, [pc, #256]	@ (80004ac <spi_gpio_init+0x10c>)
 80003aa:	f043 0301 	orr.w	r3, r3, #1
 80003ae:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set PA5,PA6,PA7 mode to alternate function*/

	/*PA5*/
	GPIOA->MODER &=~(1U<<10);
 80003b0:	4b3f      	ldr	r3, [pc, #252]	@ (80004b0 <spi_gpio_init+0x110>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a3e      	ldr	r2, [pc, #248]	@ (80004b0 <spi_gpio_init+0x110>)
 80003b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80003ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<11);
 80003bc:	4b3c      	ldr	r3, [pc, #240]	@ (80004b0 <spi_gpio_init+0x110>)
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	4a3b      	ldr	r2, [pc, #236]	@ (80004b0 <spi_gpio_init+0x110>)
 80003c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80003c6:	6013      	str	r3, [r2, #0]

	/*PA6*/
	GPIOA->MODER &=~(1U<<12);
 80003c8:	4b39      	ldr	r3, [pc, #228]	@ (80004b0 <spi_gpio_init+0x110>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	4a38      	ldr	r2, [pc, #224]	@ (80004b0 <spi_gpio_init+0x110>)
 80003ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80003d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<13);
 80003d4:	4b36      	ldr	r3, [pc, #216]	@ (80004b0 <spi_gpio_init+0x110>)
 80003d6:	681b      	ldr	r3, [r3, #0]
 80003d8:	4a35      	ldr	r2, [pc, #212]	@ (80004b0 <spi_gpio_init+0x110>)
 80003da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80003de:	6013      	str	r3, [r2, #0]

	/*PA7*/
	GPIOA->MODER &=~(1U<<14);
 80003e0:	4b33      	ldr	r3, [pc, #204]	@ (80004b0 <spi_gpio_init+0x110>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4a32      	ldr	r2, [pc, #200]	@ (80004b0 <spi_gpio_init+0x110>)
 80003e6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80003ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<15);
 80003ec:	4b30      	ldr	r3, [pc, #192]	@ (80004b0 <spi_gpio_init+0x110>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	4a2f      	ldr	r2, [pc, #188]	@ (80004b0 <spi_gpio_init+0x110>)
 80003f2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80003f6:	6013      	str	r3, [r2, #0]


	/*Set PA9 as output pin*/
	GPIOA->MODER |=(1U<<18);
 80003f8:	4b2d      	ldr	r3, [pc, #180]	@ (80004b0 <spi_gpio_init+0x110>)
 80003fa:	681b      	ldr	r3, [r3, #0]
 80003fc:	4a2c      	ldr	r2, [pc, #176]	@ (80004b0 <spi_gpio_init+0x110>)
 80003fe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000402:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<19);
 8000404:	4b2a      	ldr	r3, [pc, #168]	@ (80004b0 <spi_gpio_init+0x110>)
 8000406:	681b      	ldr	r3, [r3, #0]
 8000408:	4a29      	ldr	r2, [pc, #164]	@ (80004b0 <spi_gpio_init+0x110>)
 800040a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800040e:	6013      	str	r3, [r2, #0]

	/*Set PA5,PA6,PA7 alternate function type to SPI1*/
	/*PA5*/
	GPIOA->AFR[0] |=(1U<<20);
 8000410:	4b27      	ldr	r3, [pc, #156]	@ (80004b0 <spi_gpio_init+0x110>)
 8000412:	6a1b      	ldr	r3, [r3, #32]
 8000414:	4a26      	ldr	r2, [pc, #152]	@ (80004b0 <spi_gpio_init+0x110>)
 8000416:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800041a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<21);
 800041c:	4b24      	ldr	r3, [pc, #144]	@ (80004b0 <spi_gpio_init+0x110>)
 800041e:	6a1b      	ldr	r3, [r3, #32]
 8000420:	4a23      	ldr	r2, [pc, #140]	@ (80004b0 <spi_gpio_init+0x110>)
 8000422:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000426:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<22);
 8000428:	4b21      	ldr	r3, [pc, #132]	@ (80004b0 <spi_gpio_init+0x110>)
 800042a:	6a1b      	ldr	r3, [r3, #32]
 800042c:	4a20      	ldr	r2, [pc, #128]	@ (80004b0 <spi_gpio_init+0x110>)
 800042e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000432:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<23);
 8000434:	4b1e      	ldr	r3, [pc, #120]	@ (80004b0 <spi_gpio_init+0x110>)
 8000436:	6a1b      	ldr	r3, [r3, #32]
 8000438:	4a1d      	ldr	r2, [pc, #116]	@ (80004b0 <spi_gpio_init+0x110>)
 800043a:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800043e:	6213      	str	r3, [r2, #32]

	/*PA6*/
	GPIOA->AFR[0] |=(1U<<24);
 8000440:	4b1b      	ldr	r3, [pc, #108]	@ (80004b0 <spi_gpio_init+0x110>)
 8000442:	6a1b      	ldr	r3, [r3, #32]
 8000444:	4a1a      	ldr	r2, [pc, #104]	@ (80004b0 <spi_gpio_init+0x110>)
 8000446:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800044a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<25);
 800044c:	4b18      	ldr	r3, [pc, #96]	@ (80004b0 <spi_gpio_init+0x110>)
 800044e:	6a1b      	ldr	r3, [r3, #32]
 8000450:	4a17      	ldr	r2, [pc, #92]	@ (80004b0 <spi_gpio_init+0x110>)
 8000452:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8000456:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<26);
 8000458:	4b15      	ldr	r3, [pc, #84]	@ (80004b0 <spi_gpio_init+0x110>)
 800045a:	6a1b      	ldr	r3, [r3, #32]
 800045c:	4a14      	ldr	r2, [pc, #80]	@ (80004b0 <spi_gpio_init+0x110>)
 800045e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000462:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<27);
 8000464:	4b12      	ldr	r3, [pc, #72]	@ (80004b0 <spi_gpio_init+0x110>)
 8000466:	6a1b      	ldr	r3, [r3, #32]
 8000468:	4a11      	ldr	r2, [pc, #68]	@ (80004b0 <spi_gpio_init+0x110>)
 800046a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800046e:	6213      	str	r3, [r2, #32]

	/*PA7*/
	GPIOA->AFR[0] |=(1U<<28);
 8000470:	4b0f      	ldr	r3, [pc, #60]	@ (80004b0 <spi_gpio_init+0x110>)
 8000472:	6a1b      	ldr	r3, [r3, #32]
 8000474:	4a0e      	ldr	r2, [pc, #56]	@ (80004b0 <spi_gpio_init+0x110>)
 8000476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800047a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<29);
 800047c:	4b0c      	ldr	r3, [pc, #48]	@ (80004b0 <spi_gpio_init+0x110>)
 800047e:	6a1b      	ldr	r3, [r3, #32]
 8000480:	4a0b      	ldr	r2, [pc, #44]	@ (80004b0 <spi_gpio_init+0x110>)
 8000482:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000486:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<30);
 8000488:	4b09      	ldr	r3, [pc, #36]	@ (80004b0 <spi_gpio_init+0x110>)
 800048a:	6a1b      	ldr	r3, [r3, #32]
 800048c:	4a08      	ldr	r2, [pc, #32]	@ (80004b0 <spi_gpio_init+0x110>)
 800048e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000492:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<31);
 8000494:	4b06      	ldr	r3, [pc, #24]	@ (80004b0 <spi_gpio_init+0x110>)
 8000496:	6a1b      	ldr	r3, [r3, #32]
 8000498:	4a05      	ldr	r2, [pc, #20]	@ (80004b0 <spi_gpio_init+0x110>)
 800049a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800049e:	6213      	str	r3, [r2, #32]


}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40023800 	.word	0x40023800
 80004b0:	40020000 	.word	0x40020000

080004b4 <spi1_config>:

void spi1_config(void)
{
 80004b4:	b480      	push	{r7}
 80004b6:	af00      	add	r7, sp, #0
    /* 1) enable SPI1 peripheral clock */
    RCC->APB2ENR |= SPI1EN;
 80004b8:	4b0a      	ldr	r3, [pc, #40]	@ (80004e4 <spi1_config+0x30>)
 80004ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80004bc:	4a09      	ldr	r2, [pc, #36]	@ (80004e4 <spi1_config+0x30>)
 80004be:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80004c2:	6453      	str	r3, [r2, #68]	@ 0x44
       – SSI    = 1    → internal “NSS” high
       – DFF    = 0    → 8‑bit data frame
       – LSBFIRST = 0  → MSB first
       – BIDIMODE=0,RXONLY=0 → 2‑line full‑duplex
    */
    SPI1->CR1 =
 80004c4:	4b08      	ldr	r3, [pc, #32]	@ (80004e8 <spi1_config+0x34>)
 80004c6:	f240 3217 	movw	r2, #791	@ 0x317
 80004ca:	601a      	str	r2, [r3, #0]
        (1U<<0)   /* CPHA   */                     |
        (1U<<9)   /* SSI    */                     |
        (1U<<8);  /* SSM    */

    /* 2) enable SPI now that CR1 is set */
    SPI1->CR1 |= (1U<<6);  /* SPE = 1 */
 80004cc:	4b06      	ldr	r3, [pc, #24]	@ (80004e8 <spi1_config+0x34>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a05      	ldr	r2, [pc, #20]	@ (80004e8 <spi1_config+0x34>)
 80004d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80004d6:	6013      	str	r3, [r2, #0]
}
 80004d8:	bf00      	nop
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40023800 	.word	0x40023800
 80004e8:	40013000 	.word	0x40013000

080004ec <spi1_transmit>:

void spi1_transmit(uint8_t *data,uint32_t size)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
	uint32_t i=0;
 80004f6:	2300      	movs	r3, #0
 80004f8:	60fb      	str	r3, [r7, #12]
	uint8_t temp;

	while(i<size)
 80004fa:	e00f      	b.n	800051c <spi1_transmit+0x30>
	{
		/*Wait until TXE is set*/
		while(!(SPI1->SR & (SR_TXE))){}
 80004fc:	bf00      	nop
 80004fe:	4b16      	ldr	r3, [pc, #88]	@ (8000558 <spi1_transmit+0x6c>)
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <spi1_transmit+0x12>

		/*Write the data to the data register*/
		SPI1->DR = data[i];
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	4413      	add	r3, r2
 8000510:	781a      	ldrb	r2, [r3, #0]
 8000512:	4b11      	ldr	r3, [pc, #68]	@ (8000558 <spi1_transmit+0x6c>)
 8000514:	60da      	str	r2, [r3, #12]
		i++;
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	3301      	adds	r3, #1
 800051a:	60fb      	str	r3, [r7, #12]
	while(i<size)
 800051c:	68fa      	ldr	r2, [r7, #12]
 800051e:	683b      	ldr	r3, [r7, #0]
 8000520:	429a      	cmp	r2, r3
 8000522:	d3eb      	bcc.n	80004fc <spi1_transmit+0x10>
	}
	/*Wait until TXE is set*/
	while(!(SPI1->SR & (SR_TXE))){}
 8000524:	bf00      	nop
 8000526:	4b0c      	ldr	r3, [pc, #48]	@ (8000558 <spi1_transmit+0x6c>)
 8000528:	689b      	ldr	r3, [r3, #8]
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f9      	beq.n	8000526 <spi1_transmit+0x3a>

	/*Wait for BUSY flag to reset*/
	while((SPI1->SR & (SR_BSY))){}
 8000532:	bf00      	nop
 8000534:	4b08      	ldr	r3, [pc, #32]	@ (8000558 <spi1_transmit+0x6c>)
 8000536:	689b      	ldr	r3, [r3, #8]
 8000538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800053c:	2b00      	cmp	r3, #0
 800053e:	d1f9      	bne.n	8000534 <spi1_transmit+0x48>

	/*Clear OVR flag*/
	temp = SPI1->DR;
 8000540:	4b05      	ldr	r3, [pc, #20]	@ (8000558 <spi1_transmit+0x6c>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	72fb      	strb	r3, [r7, #11]
	temp = SPI1->SR;
 8000546:	4b04      	ldr	r3, [pc, #16]	@ (8000558 <spi1_transmit+0x6c>)
 8000548:	689b      	ldr	r3, [r3, #8]
 800054a:	72fb      	strb	r3, [r7, #11]
}
 800054c:	bf00      	nop
 800054e:	3714      	adds	r7, #20
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40013000 	.word	0x40013000

0800055c <spi1_receive>:

void spi1_receive(uint8_t *data, uint32_t size)
{
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
	while(size)
 8000566:	e013      	b.n	8000590 <spi1_receive+0x34>
	{
		/*Send dummy data*/
		SPI1->DR =0;
 8000568:	4b0e      	ldr	r3, [pc, #56]	@ (80005a4 <spi1_receive+0x48>)
 800056a:	2200      	movs	r2, #0
 800056c:	60da      	str	r2, [r3, #12]

		/*Wait for RXNE flag to be set*/
		while(!(SPI1->SR & (SR_RXNE))){}
 800056e:	bf00      	nop
 8000570:	4b0c      	ldr	r3, [pc, #48]	@ (80005a4 <spi1_receive+0x48>)
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f003 0301 	and.w	r3, r3, #1
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f9      	beq.n	8000570 <spi1_receive+0x14>

		/*Read data from data register*/
		*data++ = (SPI1->DR);
 800057c:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <spi1_receive+0x48>)
 800057e:	68d9      	ldr	r1, [r3, #12]
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	1c5a      	adds	r2, r3, #1
 8000584:	607a      	str	r2, [r7, #4]
 8000586:	b2ca      	uxtb	r2, r1
 8000588:	701a      	strb	r2, [r3, #0]
		size--;
 800058a:	683b      	ldr	r3, [r7, #0]
 800058c:	3b01      	subs	r3, #1
 800058e:	603b      	str	r3, [r7, #0]
	while(size)
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d1e8      	bne.n	8000568 <spi1_receive+0xc>
	}
}
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40013000 	.word	0x40013000

080005a8 <cs_enable>:


void cs_enable(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
	GPIOA->ODR &=~(1U<<9);
 80005ac:	4b05      	ldr	r3, [pc, #20]	@ (80005c4 <cs_enable+0x1c>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a04      	ldr	r2, [pc, #16]	@ (80005c4 <cs_enable+0x1c>)
 80005b2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80005b6:	6153      	str	r3, [r2, #20]

}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40020000 	.word	0x40020000

080005c8 <cs_disable>:

/*Pull high to disable*/
void cs_disable(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
	GPIOA->ODR |=(1U<<9);
 80005cc:	4b05      	ldr	r3, [pc, #20]	@ (80005e4 <cs_disable+0x1c>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4a04      	ldr	r2, [pc, #16]	@ (80005e4 <cs_disable+0x1c>)
 80005d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005d6:	6153      	str	r3, [r2, #20]
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	40020000 	.word	0x40020000

080005e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	e00a      	b.n	8000610 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80005fa:	f3af 8000 	nop.w
 80005fe:	4601      	mov	r1, r0
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	b2ca      	uxtb	r2, r1
 8000608:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	3301      	adds	r3, #1
 800060e:	617b      	str	r3, [r7, #20]
 8000610:	697a      	ldr	r2, [r7, #20]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	429a      	cmp	r2, r3
 8000616:	dbf0      	blt.n	80005fa <_read+0x12>
  }

  return len;
 8000618:	687b      	ldr	r3, [r7, #4]
}
 800061a:	4618      	mov	r0, r3
 800061c:	3718      	adds	r7, #24
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}

08000622 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b086      	sub	sp, #24
 8000626:	af00      	add	r7, sp, #0
 8000628:	60f8      	str	r0, [r7, #12]
 800062a:	60b9      	str	r1, [r7, #8]
 800062c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	e009      	b.n	8000648 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	1c5a      	adds	r2, r3, #1
 8000638:	60ba      	str	r2, [r7, #8]
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	4618      	mov	r0, r3
 800063e:	f000 f877 	bl	8000730 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	3301      	adds	r3, #1
 8000646:	617b      	str	r3, [r7, #20]
 8000648:	697a      	ldr	r2, [r7, #20]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	429a      	cmp	r2, r3
 800064e:	dbf1      	blt.n	8000634 <_write+0x12>
  }
  return len;
 8000650:	687b      	ldr	r3, [r7, #4]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <_close>:

int _close(int file)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000662:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000666:	4618      	mov	r0, r3
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000672:	b480      	push	{r7}
 8000674:	b083      	sub	sp, #12
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000682:	605a      	str	r2, [r3, #4]
  return 0;
 8000684:	2300      	movs	r3, #0
}
 8000686:	4618      	mov	r0, r3
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr

08000692 <_isatty>:

int _isatty(int file)
{
 8000692:	b480      	push	{r7}
 8000694:	b083      	sub	sp, #12
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	370c      	adds	r7, #12
 80006a0:	46bd      	mov	sp, r7
 80006a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a6:	4770      	bx	lr

080006a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b085      	sub	sp, #20
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	60f8      	str	r0, [r7, #12]
 80006b0:	60b9      	str	r1, [r7, #8]
 80006b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80006b4:	2300      	movs	r3, #0
}
 80006b6:	4618      	mov	r0, r3
 80006b8:	3714      	adds	r7, #20
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
	...

080006c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006cc:	4a14      	ldr	r2, [pc, #80]	@ (8000720 <_sbrk+0x5c>)
 80006ce:	4b15      	ldr	r3, [pc, #84]	@ (8000724 <_sbrk+0x60>)
 80006d0:	1ad3      	subs	r3, r2, r3
 80006d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006d8:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <_sbrk+0x64>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d102      	bne.n	80006e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <_sbrk+0x64>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	@ (800072c <_sbrk+0x68>)
 80006e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80006e6:	4b10      	ldr	r3, [pc, #64]	@ (8000728 <_sbrk+0x64>)
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	4413      	add	r3, r2
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	429a      	cmp	r2, r3
 80006f2:	d207      	bcs.n	8000704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006f4:	f000 f9b8 	bl	8000a68 <__errno>
 80006f8:	4603      	mov	r3, r0
 80006fa:	220c      	movs	r2, #12
 80006fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000702:	e009      	b.n	8000718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000704:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <_sbrk+0x64>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800070a:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <_sbrk+0x64>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	4413      	add	r3, r2
 8000712:	4a05      	ldr	r2, [pc, #20]	@ (8000728 <_sbrk+0x64>)
 8000714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000716:	68fb      	ldr	r3, [r7, #12]
}
 8000718:	4618      	mov	r0, r3
 800071a:	3718      	adds	r7, #24
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	20020000 	.word	0x20020000
 8000724:	00000400 	.word	0x00000400
 8000728:	20000078 	.word	0x20000078
 800072c:	200001c8 	.word	0x200001c8

08000730 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000738:	6878      	ldr	r0, [r7, #4]
 800073a:	f000 f84f 	bl	80007dc <uart_write>
	return ch;
 800073e:	687b      	ldr	r3, [r7, #4]
}
 8000740:	4618      	mov	r0, r3
 8000742:	3708      	adds	r7, #8
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}

08000748 <uart_init>:

void uart_init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <uart_init+0x84>)
 800074e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000750:	4a1e      	ldr	r2, [pc, #120]	@ (80007cc <uart_init+0x84>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	6313      	str	r3, [r2, #48]	@ 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000758:	4b1d      	ldr	r3, [pc, #116]	@ (80007d0 <uart_init+0x88>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a1c      	ldr	r2, [pc, #112]	@ (80007d0 <uart_init+0x88>)
 800075e:	f023 0310 	bic.w	r3, r3, #16
 8000762:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000764:	4b1a      	ldr	r3, [pc, #104]	@ (80007d0 <uart_init+0x88>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a19      	ldr	r2, [pc, #100]	@ (80007d0 <uart_init+0x88>)
 800076a:	f043 0320 	orr.w	r3, r3, #32
 800076e:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000770:	4b17      	ldr	r3, [pc, #92]	@ (80007d0 <uart_init+0x88>)
 8000772:	6a1b      	ldr	r3, [r3, #32]
 8000774:	4a16      	ldr	r2, [pc, #88]	@ (80007d0 <uart_init+0x88>)
 8000776:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800077a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 800077c:	4b14      	ldr	r3, [pc, #80]	@ (80007d0 <uart_init+0x88>)
 800077e:	6a1b      	ldr	r3, [r3, #32]
 8000780:	4a13      	ldr	r2, [pc, #76]	@ (80007d0 <uart_init+0x88>)
 8000782:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000786:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <uart_init+0x88>)
 800078a:	6a1b      	ldr	r3, [r3, #32]
 800078c:	4a10      	ldr	r2, [pc, #64]	@ (80007d0 <uart_init+0x88>)
 800078e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000792:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000794:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <uart_init+0x88>)
 8000796:	6a1b      	ldr	r3, [r3, #32]
 8000798:	4a0d      	ldr	r2, [pc, #52]	@ (80007d0 <uart_init+0x88>)
 800079a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800079e:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 80007a0:	4b0a      	ldr	r3, [pc, #40]	@ (80007cc <uart_init+0x84>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	4a09      	ldr	r2, [pc, #36]	@ (80007cc <uart_init+0x84>)
 80007a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007aa:	6413      	str	r3, [r2, #64]	@ 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 80007ac:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80007b0:	4808      	ldr	r0, [pc, #32]	@ (80007d4 <uart_init+0x8c>)
 80007b2:	f000 f83f 	bl	8000834 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 80007b6:	4b08      	ldr	r3, [pc, #32]	@ (80007d8 <uart_init+0x90>)
 80007b8:	2208      	movs	r2, #8
 80007ba:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 80007bc:	4b06      	ldr	r3, [pc, #24]	@ (80007d8 <uart_init+0x90>)
 80007be:	68db      	ldr	r3, [r3, #12]
 80007c0:	4a05      	ldr	r2, [pc, #20]	@ (80007d8 <uart_init+0x90>)
 80007c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007c6:	60d3      	str	r3, [r2, #12]
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020000 	.word	0x40020000
 80007d4:	00f42400 	.word	0x00f42400
 80007d8:	40004400 	.word	0x40004400

080007dc <uart_write>:



static void uart_write(int ch)
{
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 80007e4:	bf00      	nop
 80007e6:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <uart_write+0x2c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d0f9      	beq.n	80007e6 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4a04      	ldr	r2, [pc, #16]	@ (8000808 <uart_write+0x2c>)
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	6053      	str	r3, [r2, #4]
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40004400 	.word	0x40004400

0800080c <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	085a      	lsrs	r2, r3, #1
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	441a      	add	r2, r3
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	fbb2 f3f3 	udiv	r3, r2, r3
 8000824:	b29b      	uxth	r3, r3
}
 8000826:	4618      	mov	r0, r3
 8000828:	370c      	adds	r7, #12
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
	...

08000834 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b082      	sub	sp, #8
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 800083e:	6839      	ldr	r1, [r7, #0]
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff ffe3 	bl	800080c <compute_uart_bd>
 8000846:	4603      	mov	r3, r0
 8000848:	461a      	mov	r2, r3
 800084a:	4b03      	ldr	r3, [pc, #12]	@ (8000858 <uart_set_baudrate+0x24>)
 800084c:	609a      	str	r2, [r3, #8]
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40004400 	.word	0x40004400

0800085c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800085c:	480d      	ldr	r0, [pc, #52]	@ (8000894 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800085e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000860:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000864:	480c      	ldr	r0, [pc, #48]	@ (8000898 <LoopForever+0x6>)
  ldr r1, =_edata
 8000866:	490d      	ldr	r1, [pc, #52]	@ (800089c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000868:	4a0d      	ldr	r2, [pc, #52]	@ (80008a0 <LoopForever+0xe>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0a      	ldr	r2, [pc, #40]	@ (80008a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800087c:	4c0a      	ldr	r4, [pc, #40]	@ (80008a8 <LoopForever+0x16>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800088a:	f000 f8f3 	bl	8000a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800088e:	f7ff fd71 	bl	8000374 <main>

08000892 <LoopForever>:

LoopForever:
  b LoopForever
 8000892:	e7fe      	b.n	8000892 <LoopForever>
  ldr   r0, =_estack
 8000894:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000898:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800089c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008a0:	08001774 	.word	0x08001774
  ldr r2, =_sbss
 80008a4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008a8:	200001c8 	.word	0x200001c8

080008ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008ac:	e7fe      	b.n	80008ac <ADC_IRQHandler>
	...

080008b0 <std>:
 80008b0:	2300      	movs	r3, #0
 80008b2:	b510      	push	{r4, lr}
 80008b4:	4604      	mov	r4, r0
 80008b6:	e9c0 3300 	strd	r3, r3, [r0]
 80008ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008be:	6083      	str	r3, [r0, #8]
 80008c0:	8181      	strh	r1, [r0, #12]
 80008c2:	6643      	str	r3, [r0, #100]	@ 0x64
 80008c4:	81c2      	strh	r2, [r0, #14]
 80008c6:	6183      	str	r3, [r0, #24]
 80008c8:	4619      	mov	r1, r3
 80008ca:	2208      	movs	r2, #8
 80008cc:	305c      	adds	r0, #92	@ 0x5c
 80008ce:	f000 f8c3 	bl	8000a58 <memset>
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <std+0x58>)
 80008d4:	6263      	str	r3, [r4, #36]	@ 0x24
 80008d6:	4b0d      	ldr	r3, [pc, #52]	@ (800090c <std+0x5c>)
 80008d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80008da:	4b0d      	ldr	r3, [pc, #52]	@ (8000910 <std+0x60>)
 80008dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80008de:	4b0d      	ldr	r3, [pc, #52]	@ (8000914 <std+0x64>)
 80008e0:	6323      	str	r3, [r4, #48]	@ 0x30
 80008e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000918 <std+0x68>)
 80008e4:	6224      	str	r4, [r4, #32]
 80008e6:	429c      	cmp	r4, r3
 80008e8:	d006      	beq.n	80008f8 <std+0x48>
 80008ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80008ee:	4294      	cmp	r4, r2
 80008f0:	d002      	beq.n	80008f8 <std+0x48>
 80008f2:	33d0      	adds	r3, #208	@ 0xd0
 80008f4:	429c      	cmp	r4, r3
 80008f6:	d105      	bne.n	8000904 <std+0x54>
 80008f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80008fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000900:	f000 b8dc 	b.w	8000abc <__retarget_lock_init_recursive>
 8000904:	bd10      	pop	{r4, pc}
 8000906:	bf00      	nop
 8000908:	08001311 	.word	0x08001311
 800090c:	08001333 	.word	0x08001333
 8000910:	0800136b 	.word	0x0800136b
 8000914:	0800138f 	.word	0x0800138f
 8000918:	2000007c 	.word	0x2000007c

0800091c <stdio_exit_handler>:
 800091c:	4a02      	ldr	r2, [pc, #8]	@ (8000928 <stdio_exit_handler+0xc>)
 800091e:	4903      	ldr	r1, [pc, #12]	@ (800092c <stdio_exit_handler+0x10>)
 8000920:	4803      	ldr	r0, [pc, #12]	@ (8000930 <stdio_exit_handler+0x14>)
 8000922:	f000 b869 	b.w	80009f8 <_fwalk_sglue>
 8000926:	bf00      	nop
 8000928:	20000000 	.word	0x20000000
 800092c:	080012a9 	.word	0x080012a9
 8000930:	20000010 	.word	0x20000010

08000934 <cleanup_stdio>:
 8000934:	6841      	ldr	r1, [r0, #4]
 8000936:	4b0c      	ldr	r3, [pc, #48]	@ (8000968 <cleanup_stdio+0x34>)
 8000938:	4299      	cmp	r1, r3
 800093a:	b510      	push	{r4, lr}
 800093c:	4604      	mov	r4, r0
 800093e:	d001      	beq.n	8000944 <cleanup_stdio+0x10>
 8000940:	f000 fcb2 	bl	80012a8 <_fflush_r>
 8000944:	68a1      	ldr	r1, [r4, #8]
 8000946:	4b09      	ldr	r3, [pc, #36]	@ (800096c <cleanup_stdio+0x38>)
 8000948:	4299      	cmp	r1, r3
 800094a:	d002      	beq.n	8000952 <cleanup_stdio+0x1e>
 800094c:	4620      	mov	r0, r4
 800094e:	f000 fcab 	bl	80012a8 <_fflush_r>
 8000952:	68e1      	ldr	r1, [r4, #12]
 8000954:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <cleanup_stdio+0x3c>)
 8000956:	4299      	cmp	r1, r3
 8000958:	d004      	beq.n	8000964 <cleanup_stdio+0x30>
 800095a:	4620      	mov	r0, r4
 800095c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000960:	f000 bca2 	b.w	80012a8 <_fflush_r>
 8000964:	bd10      	pop	{r4, pc}
 8000966:	bf00      	nop
 8000968:	2000007c 	.word	0x2000007c
 800096c:	200000e4 	.word	0x200000e4
 8000970:	2000014c 	.word	0x2000014c

08000974 <global_stdio_init.part.0>:
 8000974:	b510      	push	{r4, lr}
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <global_stdio_init.part.0+0x30>)
 8000978:	4c0b      	ldr	r4, [pc, #44]	@ (80009a8 <global_stdio_init.part.0+0x34>)
 800097a:	4a0c      	ldr	r2, [pc, #48]	@ (80009ac <global_stdio_init.part.0+0x38>)
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	4620      	mov	r0, r4
 8000980:	2200      	movs	r2, #0
 8000982:	2104      	movs	r1, #4
 8000984:	f7ff ff94 	bl	80008b0 <std>
 8000988:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800098c:	2201      	movs	r2, #1
 800098e:	2109      	movs	r1, #9
 8000990:	f7ff ff8e 	bl	80008b0 <std>
 8000994:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000998:	2202      	movs	r2, #2
 800099a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800099e:	2112      	movs	r1, #18
 80009a0:	f7ff bf86 	b.w	80008b0 <std>
 80009a4:	200001b4 	.word	0x200001b4
 80009a8:	2000007c 	.word	0x2000007c
 80009ac:	0800091d 	.word	0x0800091d

080009b0 <__sfp_lock_acquire>:
 80009b0:	4801      	ldr	r0, [pc, #4]	@ (80009b8 <__sfp_lock_acquire+0x8>)
 80009b2:	f000 b884 	b.w	8000abe <__retarget_lock_acquire_recursive>
 80009b6:	bf00      	nop
 80009b8:	200001b9 	.word	0x200001b9

080009bc <__sfp_lock_release>:
 80009bc:	4801      	ldr	r0, [pc, #4]	@ (80009c4 <__sfp_lock_release+0x8>)
 80009be:	f000 b87f 	b.w	8000ac0 <__retarget_lock_release_recursive>
 80009c2:	bf00      	nop
 80009c4:	200001b9 	.word	0x200001b9

080009c8 <__sinit>:
 80009c8:	b510      	push	{r4, lr}
 80009ca:	4604      	mov	r4, r0
 80009cc:	f7ff fff0 	bl	80009b0 <__sfp_lock_acquire>
 80009d0:	6a23      	ldr	r3, [r4, #32]
 80009d2:	b11b      	cbz	r3, 80009dc <__sinit+0x14>
 80009d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009d8:	f7ff bff0 	b.w	80009bc <__sfp_lock_release>
 80009dc:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <__sinit+0x28>)
 80009de:	6223      	str	r3, [r4, #32]
 80009e0:	4b04      	ldr	r3, [pc, #16]	@ (80009f4 <__sinit+0x2c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d1f5      	bne.n	80009d4 <__sinit+0xc>
 80009e8:	f7ff ffc4 	bl	8000974 <global_stdio_init.part.0>
 80009ec:	e7f2      	b.n	80009d4 <__sinit+0xc>
 80009ee:	bf00      	nop
 80009f0:	08000935 	.word	0x08000935
 80009f4:	200001b4 	.word	0x200001b4

080009f8 <_fwalk_sglue>:
 80009f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009fc:	4607      	mov	r7, r0
 80009fe:	4688      	mov	r8, r1
 8000a00:	4614      	mov	r4, r2
 8000a02:	2600      	movs	r6, #0
 8000a04:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a08:	f1b9 0901 	subs.w	r9, r9, #1
 8000a0c:	d505      	bpl.n	8000a1a <_fwalk_sglue+0x22>
 8000a0e:	6824      	ldr	r4, [r4, #0]
 8000a10:	2c00      	cmp	r4, #0
 8000a12:	d1f7      	bne.n	8000a04 <_fwalk_sglue+0xc>
 8000a14:	4630      	mov	r0, r6
 8000a16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a1a:	89ab      	ldrh	r3, [r5, #12]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d907      	bls.n	8000a30 <_fwalk_sglue+0x38>
 8000a20:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a24:	3301      	adds	r3, #1
 8000a26:	d003      	beq.n	8000a30 <_fwalk_sglue+0x38>
 8000a28:	4629      	mov	r1, r5
 8000a2a:	4638      	mov	r0, r7
 8000a2c:	47c0      	blx	r8
 8000a2e:	4306      	orrs	r6, r0
 8000a30:	3568      	adds	r5, #104	@ 0x68
 8000a32:	e7e9      	b.n	8000a08 <_fwalk_sglue+0x10>

08000a34 <iprintf>:
 8000a34:	b40f      	push	{r0, r1, r2, r3}
 8000a36:	b507      	push	{r0, r1, r2, lr}
 8000a38:	4906      	ldr	r1, [pc, #24]	@ (8000a54 <iprintf+0x20>)
 8000a3a:	ab04      	add	r3, sp, #16
 8000a3c:	6808      	ldr	r0, [r1, #0]
 8000a3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a42:	6881      	ldr	r1, [r0, #8]
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	f000 f865 	bl	8000b14 <_vfiprintf_r>
 8000a4a:	b003      	add	sp, #12
 8000a4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a50:	b004      	add	sp, #16
 8000a52:	4770      	bx	lr
 8000a54:	2000000c 	.word	0x2000000c

08000a58 <memset>:
 8000a58:	4402      	add	r2, r0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d100      	bne.n	8000a62 <memset+0xa>
 8000a60:	4770      	bx	lr
 8000a62:	f803 1b01 	strb.w	r1, [r3], #1
 8000a66:	e7f9      	b.n	8000a5c <memset+0x4>

08000a68 <__errno>:
 8000a68:	4b01      	ldr	r3, [pc, #4]	@ (8000a70 <__errno+0x8>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	2000000c 	.word	0x2000000c

08000a74 <__libc_init_array>:
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	4d0d      	ldr	r5, [pc, #52]	@ (8000aac <__libc_init_array+0x38>)
 8000a78:	4c0d      	ldr	r4, [pc, #52]	@ (8000ab0 <__libc_init_array+0x3c>)
 8000a7a:	1b64      	subs	r4, r4, r5
 8000a7c:	10a4      	asrs	r4, r4, #2
 8000a7e:	2600      	movs	r6, #0
 8000a80:	42a6      	cmp	r6, r4
 8000a82:	d109      	bne.n	8000a98 <__libc_init_array+0x24>
 8000a84:	4d0b      	ldr	r5, [pc, #44]	@ (8000ab4 <__libc_init_array+0x40>)
 8000a86:	4c0c      	ldr	r4, [pc, #48]	@ (8000ab8 <__libc_init_array+0x44>)
 8000a88:	f000 fe3e 	bl	8001708 <_init>
 8000a8c:	1b64      	subs	r4, r4, r5
 8000a8e:	10a4      	asrs	r4, r4, #2
 8000a90:	2600      	movs	r6, #0
 8000a92:	42a6      	cmp	r6, r4
 8000a94:	d105      	bne.n	8000aa2 <__libc_init_array+0x2e>
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a9c:	4798      	blx	r3
 8000a9e:	3601      	adds	r6, #1
 8000aa0:	e7ee      	b.n	8000a80 <__libc_init_array+0xc>
 8000aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa6:	4798      	blx	r3
 8000aa8:	3601      	adds	r6, #1
 8000aaa:	e7f2      	b.n	8000a92 <__libc_init_array+0x1e>
 8000aac:	0800176c 	.word	0x0800176c
 8000ab0:	0800176c 	.word	0x0800176c
 8000ab4:	0800176c 	.word	0x0800176c
 8000ab8:	08001770 	.word	0x08001770

08000abc <__retarget_lock_init_recursive>:
 8000abc:	4770      	bx	lr

08000abe <__retarget_lock_acquire_recursive>:
 8000abe:	4770      	bx	lr

08000ac0 <__retarget_lock_release_recursive>:
 8000ac0:	4770      	bx	lr

08000ac2 <__sfputc_r>:
 8000ac2:	6893      	ldr	r3, [r2, #8]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	b410      	push	{r4}
 8000aca:	6093      	str	r3, [r2, #8]
 8000acc:	da08      	bge.n	8000ae0 <__sfputc_r+0x1e>
 8000ace:	6994      	ldr	r4, [r2, #24]
 8000ad0:	42a3      	cmp	r3, r4
 8000ad2:	db01      	blt.n	8000ad8 <__sfputc_r+0x16>
 8000ad4:	290a      	cmp	r1, #10
 8000ad6:	d103      	bne.n	8000ae0 <__sfputc_r+0x1e>
 8000ad8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000adc:	f000 bc5b 	b.w	8001396 <__swbuf_r>
 8000ae0:	6813      	ldr	r3, [r2, #0]
 8000ae2:	1c58      	adds	r0, r3, #1
 8000ae4:	6010      	str	r0, [r2, #0]
 8000ae6:	7019      	strb	r1, [r3, #0]
 8000ae8:	4608      	mov	r0, r1
 8000aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <__sfputs_r>:
 8000af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af2:	4606      	mov	r6, r0
 8000af4:	460f      	mov	r7, r1
 8000af6:	4614      	mov	r4, r2
 8000af8:	18d5      	adds	r5, r2, r3
 8000afa:	42ac      	cmp	r4, r5
 8000afc:	d101      	bne.n	8000b02 <__sfputs_r+0x12>
 8000afe:	2000      	movs	r0, #0
 8000b00:	e007      	b.n	8000b12 <__sfputs_r+0x22>
 8000b02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b06:	463a      	mov	r2, r7
 8000b08:	4630      	mov	r0, r6
 8000b0a:	f7ff ffda 	bl	8000ac2 <__sfputc_r>
 8000b0e:	1c43      	adds	r3, r0, #1
 8000b10:	d1f3      	bne.n	8000afa <__sfputs_r+0xa>
 8000b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000b14 <_vfiprintf_r>:
 8000b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b18:	460d      	mov	r5, r1
 8000b1a:	b09d      	sub	sp, #116	@ 0x74
 8000b1c:	4614      	mov	r4, r2
 8000b1e:	4698      	mov	r8, r3
 8000b20:	4606      	mov	r6, r0
 8000b22:	b118      	cbz	r0, 8000b2c <_vfiprintf_r+0x18>
 8000b24:	6a03      	ldr	r3, [r0, #32]
 8000b26:	b90b      	cbnz	r3, 8000b2c <_vfiprintf_r+0x18>
 8000b28:	f7ff ff4e 	bl	80009c8 <__sinit>
 8000b2c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b2e:	07d9      	lsls	r1, r3, #31
 8000b30:	d405      	bmi.n	8000b3e <_vfiprintf_r+0x2a>
 8000b32:	89ab      	ldrh	r3, [r5, #12]
 8000b34:	059a      	lsls	r2, r3, #22
 8000b36:	d402      	bmi.n	8000b3e <_vfiprintf_r+0x2a>
 8000b38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b3a:	f7ff ffc0 	bl	8000abe <__retarget_lock_acquire_recursive>
 8000b3e:	89ab      	ldrh	r3, [r5, #12]
 8000b40:	071b      	lsls	r3, r3, #28
 8000b42:	d501      	bpl.n	8000b48 <_vfiprintf_r+0x34>
 8000b44:	692b      	ldr	r3, [r5, #16]
 8000b46:	b99b      	cbnz	r3, 8000b70 <_vfiprintf_r+0x5c>
 8000b48:	4629      	mov	r1, r5
 8000b4a:	4630      	mov	r0, r6
 8000b4c:	f000 fc62 	bl	8001414 <__swsetup_r>
 8000b50:	b170      	cbz	r0, 8000b70 <_vfiprintf_r+0x5c>
 8000b52:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000b54:	07dc      	lsls	r4, r3, #31
 8000b56:	d504      	bpl.n	8000b62 <_vfiprintf_r+0x4e>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b5c:	b01d      	add	sp, #116	@ 0x74
 8000b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b62:	89ab      	ldrh	r3, [r5, #12]
 8000b64:	0598      	lsls	r0, r3, #22
 8000b66:	d4f7      	bmi.n	8000b58 <_vfiprintf_r+0x44>
 8000b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000b6a:	f7ff ffa9 	bl	8000ac0 <__retarget_lock_release_recursive>
 8000b6e:	e7f3      	b.n	8000b58 <_vfiprintf_r+0x44>
 8000b70:	2300      	movs	r3, #0
 8000b72:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b74:	2320      	movs	r3, #32
 8000b76:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000b7a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b7e:	2330      	movs	r3, #48	@ 0x30
 8000b80:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000d30 <_vfiprintf_r+0x21c>
 8000b84:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000b88:	f04f 0901 	mov.w	r9, #1
 8000b8c:	4623      	mov	r3, r4
 8000b8e:	469a      	mov	sl, r3
 8000b90:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b94:	b10a      	cbz	r2, 8000b9a <_vfiprintf_r+0x86>
 8000b96:	2a25      	cmp	r2, #37	@ 0x25
 8000b98:	d1f9      	bne.n	8000b8e <_vfiprintf_r+0x7a>
 8000b9a:	ebba 0b04 	subs.w	fp, sl, r4
 8000b9e:	d00b      	beq.n	8000bb8 <_vfiprintf_r+0xa4>
 8000ba0:	465b      	mov	r3, fp
 8000ba2:	4622      	mov	r2, r4
 8000ba4:	4629      	mov	r1, r5
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	f7ff ffa2 	bl	8000af0 <__sfputs_r>
 8000bac:	3001      	adds	r0, #1
 8000bae:	f000 80a7 	beq.w	8000d00 <_vfiprintf_r+0x1ec>
 8000bb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000bb4:	445a      	add	r2, fp
 8000bb6:	9209      	str	r2, [sp, #36]	@ 0x24
 8000bb8:	f89a 3000 	ldrb.w	r3, [sl]
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	f000 809f 	beq.w	8000d00 <_vfiprintf_r+0x1ec>
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000bc8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000bcc:	f10a 0a01 	add.w	sl, sl, #1
 8000bd0:	9304      	str	r3, [sp, #16]
 8000bd2:	9307      	str	r3, [sp, #28]
 8000bd4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000bd8:	931a      	str	r3, [sp, #104]	@ 0x68
 8000bda:	4654      	mov	r4, sl
 8000bdc:	2205      	movs	r2, #5
 8000bde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000be2:	4853      	ldr	r0, [pc, #332]	@ (8000d30 <_vfiprintf_r+0x21c>)
 8000be4:	f7ff fb14 	bl	8000210 <memchr>
 8000be8:	9a04      	ldr	r2, [sp, #16]
 8000bea:	b9d8      	cbnz	r0, 8000c24 <_vfiprintf_r+0x110>
 8000bec:	06d1      	lsls	r1, r2, #27
 8000bee:	bf44      	itt	mi
 8000bf0:	2320      	movmi	r3, #32
 8000bf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000bf6:	0713      	lsls	r3, r2, #28
 8000bf8:	bf44      	itt	mi
 8000bfa:	232b      	movmi	r3, #43	@ 0x2b
 8000bfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000c00:	f89a 3000 	ldrb.w	r3, [sl]
 8000c04:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c06:	d015      	beq.n	8000c34 <_vfiprintf_r+0x120>
 8000c08:	9a07      	ldr	r2, [sp, #28]
 8000c0a:	4654      	mov	r4, sl
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f04f 0c0a 	mov.w	ip, #10
 8000c12:	4621      	mov	r1, r4
 8000c14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c18:	3b30      	subs	r3, #48	@ 0x30
 8000c1a:	2b09      	cmp	r3, #9
 8000c1c:	d94b      	bls.n	8000cb6 <_vfiprintf_r+0x1a2>
 8000c1e:	b1b0      	cbz	r0, 8000c4e <_vfiprintf_r+0x13a>
 8000c20:	9207      	str	r2, [sp, #28]
 8000c22:	e014      	b.n	8000c4e <_vfiprintf_r+0x13a>
 8000c24:	eba0 0308 	sub.w	r3, r0, r8
 8000c28:	fa09 f303 	lsl.w	r3, r9, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	9304      	str	r3, [sp, #16]
 8000c30:	46a2      	mov	sl, r4
 8000c32:	e7d2      	b.n	8000bda <_vfiprintf_r+0xc6>
 8000c34:	9b03      	ldr	r3, [sp, #12]
 8000c36:	1d19      	adds	r1, r3, #4
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	9103      	str	r1, [sp, #12]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	bfbb      	ittet	lt
 8000c40:	425b      	neglt	r3, r3
 8000c42:	f042 0202 	orrlt.w	r2, r2, #2
 8000c46:	9307      	strge	r3, [sp, #28]
 8000c48:	9307      	strlt	r3, [sp, #28]
 8000c4a:	bfb8      	it	lt
 8000c4c:	9204      	strlt	r2, [sp, #16]
 8000c4e:	7823      	ldrb	r3, [r4, #0]
 8000c50:	2b2e      	cmp	r3, #46	@ 0x2e
 8000c52:	d10a      	bne.n	8000c6a <_vfiprintf_r+0x156>
 8000c54:	7863      	ldrb	r3, [r4, #1]
 8000c56:	2b2a      	cmp	r3, #42	@ 0x2a
 8000c58:	d132      	bne.n	8000cc0 <_vfiprintf_r+0x1ac>
 8000c5a:	9b03      	ldr	r3, [sp, #12]
 8000c5c:	1d1a      	adds	r2, r3, #4
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	9203      	str	r2, [sp, #12]
 8000c62:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000c66:	3402      	adds	r4, #2
 8000c68:	9305      	str	r3, [sp, #20]
 8000c6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000d40 <_vfiprintf_r+0x22c>
 8000c6e:	7821      	ldrb	r1, [r4, #0]
 8000c70:	2203      	movs	r2, #3
 8000c72:	4650      	mov	r0, sl
 8000c74:	f7ff facc 	bl	8000210 <memchr>
 8000c78:	b138      	cbz	r0, 8000c8a <_vfiprintf_r+0x176>
 8000c7a:	9b04      	ldr	r3, [sp, #16]
 8000c7c:	eba0 000a 	sub.w	r0, r0, sl
 8000c80:	2240      	movs	r2, #64	@ 0x40
 8000c82:	4082      	lsls	r2, r0
 8000c84:	4313      	orrs	r3, r2
 8000c86:	3401      	adds	r4, #1
 8000c88:	9304      	str	r3, [sp, #16]
 8000c8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c8e:	4829      	ldr	r0, [pc, #164]	@ (8000d34 <_vfiprintf_r+0x220>)
 8000c90:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000c94:	2206      	movs	r2, #6
 8000c96:	f7ff fabb 	bl	8000210 <memchr>
 8000c9a:	2800      	cmp	r0, #0
 8000c9c:	d03f      	beq.n	8000d1e <_vfiprintf_r+0x20a>
 8000c9e:	4b26      	ldr	r3, [pc, #152]	@ (8000d38 <_vfiprintf_r+0x224>)
 8000ca0:	bb1b      	cbnz	r3, 8000cea <_vfiprintf_r+0x1d6>
 8000ca2:	9b03      	ldr	r3, [sp, #12]
 8000ca4:	3307      	adds	r3, #7
 8000ca6:	f023 0307 	bic.w	r3, r3, #7
 8000caa:	3308      	adds	r3, #8
 8000cac:	9303      	str	r3, [sp, #12]
 8000cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000cb0:	443b      	add	r3, r7
 8000cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8000cb4:	e76a      	b.n	8000b8c <_vfiprintf_r+0x78>
 8000cb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8000cba:	460c      	mov	r4, r1
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	e7a8      	b.n	8000c12 <_vfiprintf_r+0xfe>
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	3401      	adds	r4, #1
 8000cc4:	9305      	str	r3, [sp, #20]
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	f04f 0c0a 	mov.w	ip, #10
 8000ccc:	4620      	mov	r0, r4
 8000cce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000cd2:	3a30      	subs	r2, #48	@ 0x30
 8000cd4:	2a09      	cmp	r2, #9
 8000cd6:	d903      	bls.n	8000ce0 <_vfiprintf_r+0x1cc>
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0c6      	beq.n	8000c6a <_vfiprintf_r+0x156>
 8000cdc:	9105      	str	r1, [sp, #20]
 8000cde:	e7c4      	b.n	8000c6a <_vfiprintf_r+0x156>
 8000ce0:	fb0c 2101 	mla	r1, ip, r1, r2
 8000ce4:	4604      	mov	r4, r0
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	e7f0      	b.n	8000ccc <_vfiprintf_r+0x1b8>
 8000cea:	ab03      	add	r3, sp, #12
 8000cec:	9300      	str	r3, [sp, #0]
 8000cee:	462a      	mov	r2, r5
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <_vfiprintf_r+0x228>)
 8000cf2:	a904      	add	r1, sp, #16
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	f3af 8000 	nop.w
 8000cfa:	4607      	mov	r7, r0
 8000cfc:	1c78      	adds	r0, r7, #1
 8000cfe:	d1d6      	bne.n	8000cae <_vfiprintf_r+0x19a>
 8000d00:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000d02:	07d9      	lsls	r1, r3, #31
 8000d04:	d405      	bmi.n	8000d12 <_vfiprintf_r+0x1fe>
 8000d06:	89ab      	ldrh	r3, [r5, #12]
 8000d08:	059a      	lsls	r2, r3, #22
 8000d0a:	d402      	bmi.n	8000d12 <_vfiprintf_r+0x1fe>
 8000d0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000d0e:	f7ff fed7 	bl	8000ac0 <__retarget_lock_release_recursive>
 8000d12:	89ab      	ldrh	r3, [r5, #12]
 8000d14:	065b      	lsls	r3, r3, #25
 8000d16:	f53f af1f 	bmi.w	8000b58 <_vfiprintf_r+0x44>
 8000d1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000d1c:	e71e      	b.n	8000b5c <_vfiprintf_r+0x48>
 8000d1e:	ab03      	add	r3, sp, #12
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	462a      	mov	r2, r5
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <_vfiprintf_r+0x228>)
 8000d26:	a904      	add	r1, sp, #16
 8000d28:	4630      	mov	r0, r6
 8000d2a:	f000 f91b 	bl	8000f64 <_printf_i>
 8000d2e:	e7e4      	b.n	8000cfa <_vfiprintf_r+0x1e6>
 8000d30:	08001730 	.word	0x08001730
 8000d34:	0800173a 	.word	0x0800173a
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	08000af1 	.word	0x08000af1
 8000d40:	08001736 	.word	0x08001736

08000d44 <sbrk_aligned>:
 8000d44:	b570      	push	{r4, r5, r6, lr}
 8000d46:	4e0f      	ldr	r6, [pc, #60]	@ (8000d84 <sbrk_aligned+0x40>)
 8000d48:	460c      	mov	r4, r1
 8000d4a:	6831      	ldr	r1, [r6, #0]
 8000d4c:	4605      	mov	r5, r0
 8000d4e:	b911      	cbnz	r1, 8000d56 <sbrk_aligned+0x12>
 8000d50:	f000 fc4c 	bl	80015ec <_sbrk_r>
 8000d54:	6030      	str	r0, [r6, #0]
 8000d56:	4621      	mov	r1, r4
 8000d58:	4628      	mov	r0, r5
 8000d5a:	f000 fc47 	bl	80015ec <_sbrk_r>
 8000d5e:	1c43      	adds	r3, r0, #1
 8000d60:	d103      	bne.n	8000d6a <sbrk_aligned+0x26>
 8000d62:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000d66:	4620      	mov	r0, r4
 8000d68:	bd70      	pop	{r4, r5, r6, pc}
 8000d6a:	1cc4      	adds	r4, r0, #3
 8000d6c:	f024 0403 	bic.w	r4, r4, #3
 8000d70:	42a0      	cmp	r0, r4
 8000d72:	d0f8      	beq.n	8000d66 <sbrk_aligned+0x22>
 8000d74:	1a21      	subs	r1, r4, r0
 8000d76:	4628      	mov	r0, r5
 8000d78:	f000 fc38 	bl	80015ec <_sbrk_r>
 8000d7c:	3001      	adds	r0, #1
 8000d7e:	d1f2      	bne.n	8000d66 <sbrk_aligned+0x22>
 8000d80:	e7ef      	b.n	8000d62 <sbrk_aligned+0x1e>
 8000d82:	bf00      	nop
 8000d84:	200001bc 	.word	0x200001bc

08000d88 <_malloc_r>:
 8000d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000d8c:	1ccd      	adds	r5, r1, #3
 8000d8e:	f025 0503 	bic.w	r5, r5, #3
 8000d92:	3508      	adds	r5, #8
 8000d94:	2d0c      	cmp	r5, #12
 8000d96:	bf38      	it	cc
 8000d98:	250c      	movcc	r5, #12
 8000d9a:	2d00      	cmp	r5, #0
 8000d9c:	4606      	mov	r6, r0
 8000d9e:	db01      	blt.n	8000da4 <_malloc_r+0x1c>
 8000da0:	42a9      	cmp	r1, r5
 8000da2:	d904      	bls.n	8000dae <_malloc_r+0x26>
 8000da4:	230c      	movs	r3, #12
 8000da6:	6033      	str	r3, [r6, #0]
 8000da8:	2000      	movs	r0, #0
 8000daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000dae:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000e84 <_malloc_r+0xfc>
 8000db2:	f000 faa1 	bl	80012f8 <__malloc_lock>
 8000db6:	f8d8 3000 	ldr.w	r3, [r8]
 8000dba:	461c      	mov	r4, r3
 8000dbc:	bb44      	cbnz	r4, 8000e10 <_malloc_r+0x88>
 8000dbe:	4629      	mov	r1, r5
 8000dc0:	4630      	mov	r0, r6
 8000dc2:	f7ff ffbf 	bl	8000d44 <sbrk_aligned>
 8000dc6:	1c43      	adds	r3, r0, #1
 8000dc8:	4604      	mov	r4, r0
 8000dca:	d158      	bne.n	8000e7e <_malloc_r+0xf6>
 8000dcc:	f8d8 4000 	ldr.w	r4, [r8]
 8000dd0:	4627      	mov	r7, r4
 8000dd2:	2f00      	cmp	r7, #0
 8000dd4:	d143      	bne.n	8000e5e <_malloc_r+0xd6>
 8000dd6:	2c00      	cmp	r4, #0
 8000dd8:	d04b      	beq.n	8000e72 <_malloc_r+0xea>
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	4639      	mov	r1, r7
 8000dde:	4630      	mov	r0, r6
 8000de0:	eb04 0903 	add.w	r9, r4, r3
 8000de4:	f000 fc02 	bl	80015ec <_sbrk_r>
 8000de8:	4581      	cmp	r9, r0
 8000dea:	d142      	bne.n	8000e72 <_malloc_r+0xea>
 8000dec:	6821      	ldr	r1, [r4, #0]
 8000dee:	1a6d      	subs	r5, r5, r1
 8000df0:	4629      	mov	r1, r5
 8000df2:	4630      	mov	r0, r6
 8000df4:	f7ff ffa6 	bl	8000d44 <sbrk_aligned>
 8000df8:	3001      	adds	r0, #1
 8000dfa:	d03a      	beq.n	8000e72 <_malloc_r+0xea>
 8000dfc:	6823      	ldr	r3, [r4, #0]
 8000dfe:	442b      	add	r3, r5
 8000e00:	6023      	str	r3, [r4, #0]
 8000e02:	f8d8 3000 	ldr.w	r3, [r8]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	bb62      	cbnz	r2, 8000e64 <_malloc_r+0xdc>
 8000e0a:	f8c8 7000 	str.w	r7, [r8]
 8000e0e:	e00f      	b.n	8000e30 <_malloc_r+0xa8>
 8000e10:	6822      	ldr	r2, [r4, #0]
 8000e12:	1b52      	subs	r2, r2, r5
 8000e14:	d420      	bmi.n	8000e58 <_malloc_r+0xd0>
 8000e16:	2a0b      	cmp	r2, #11
 8000e18:	d917      	bls.n	8000e4a <_malloc_r+0xc2>
 8000e1a:	1961      	adds	r1, r4, r5
 8000e1c:	42a3      	cmp	r3, r4
 8000e1e:	6025      	str	r5, [r4, #0]
 8000e20:	bf18      	it	ne
 8000e22:	6059      	strne	r1, [r3, #4]
 8000e24:	6863      	ldr	r3, [r4, #4]
 8000e26:	bf08      	it	eq
 8000e28:	f8c8 1000 	streq.w	r1, [r8]
 8000e2c:	5162      	str	r2, [r4, r5]
 8000e2e:	604b      	str	r3, [r1, #4]
 8000e30:	4630      	mov	r0, r6
 8000e32:	f000 fa67 	bl	8001304 <__malloc_unlock>
 8000e36:	f104 000b 	add.w	r0, r4, #11
 8000e3a:	1d23      	adds	r3, r4, #4
 8000e3c:	f020 0007 	bic.w	r0, r0, #7
 8000e40:	1ac2      	subs	r2, r0, r3
 8000e42:	bf1c      	itt	ne
 8000e44:	1a1b      	subne	r3, r3, r0
 8000e46:	50a3      	strne	r3, [r4, r2]
 8000e48:	e7af      	b.n	8000daa <_malloc_r+0x22>
 8000e4a:	6862      	ldr	r2, [r4, #4]
 8000e4c:	42a3      	cmp	r3, r4
 8000e4e:	bf0c      	ite	eq
 8000e50:	f8c8 2000 	streq.w	r2, [r8]
 8000e54:	605a      	strne	r2, [r3, #4]
 8000e56:	e7eb      	b.n	8000e30 <_malloc_r+0xa8>
 8000e58:	4623      	mov	r3, r4
 8000e5a:	6864      	ldr	r4, [r4, #4]
 8000e5c:	e7ae      	b.n	8000dbc <_malloc_r+0x34>
 8000e5e:	463c      	mov	r4, r7
 8000e60:	687f      	ldr	r7, [r7, #4]
 8000e62:	e7b6      	b.n	8000dd2 <_malloc_r+0x4a>
 8000e64:	461a      	mov	r2, r3
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	42a3      	cmp	r3, r4
 8000e6a:	d1fb      	bne.n	8000e64 <_malloc_r+0xdc>
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	6053      	str	r3, [r2, #4]
 8000e70:	e7de      	b.n	8000e30 <_malloc_r+0xa8>
 8000e72:	230c      	movs	r3, #12
 8000e74:	6033      	str	r3, [r6, #0]
 8000e76:	4630      	mov	r0, r6
 8000e78:	f000 fa44 	bl	8001304 <__malloc_unlock>
 8000e7c:	e794      	b.n	8000da8 <_malloc_r+0x20>
 8000e7e:	6005      	str	r5, [r0, #0]
 8000e80:	e7d6      	b.n	8000e30 <_malloc_r+0xa8>
 8000e82:	bf00      	nop
 8000e84:	200001c0 	.word	0x200001c0

08000e88 <_printf_common>:
 8000e88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e8c:	4616      	mov	r6, r2
 8000e8e:	4698      	mov	r8, r3
 8000e90:	688a      	ldr	r2, [r1, #8]
 8000e92:	690b      	ldr	r3, [r1, #16]
 8000e94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000e98:	4293      	cmp	r3, r2
 8000e9a:	bfb8      	it	lt
 8000e9c:	4613      	movlt	r3, r2
 8000e9e:	6033      	str	r3, [r6, #0]
 8000ea0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000ea4:	4607      	mov	r7, r0
 8000ea6:	460c      	mov	r4, r1
 8000ea8:	b10a      	cbz	r2, 8000eae <_printf_common+0x26>
 8000eaa:	3301      	adds	r3, #1
 8000eac:	6033      	str	r3, [r6, #0]
 8000eae:	6823      	ldr	r3, [r4, #0]
 8000eb0:	0699      	lsls	r1, r3, #26
 8000eb2:	bf42      	ittt	mi
 8000eb4:	6833      	ldrmi	r3, [r6, #0]
 8000eb6:	3302      	addmi	r3, #2
 8000eb8:	6033      	strmi	r3, [r6, #0]
 8000eba:	6825      	ldr	r5, [r4, #0]
 8000ebc:	f015 0506 	ands.w	r5, r5, #6
 8000ec0:	d106      	bne.n	8000ed0 <_printf_common+0x48>
 8000ec2:	f104 0a19 	add.w	sl, r4, #25
 8000ec6:	68e3      	ldr	r3, [r4, #12]
 8000ec8:	6832      	ldr	r2, [r6, #0]
 8000eca:	1a9b      	subs	r3, r3, r2
 8000ecc:	42ab      	cmp	r3, r5
 8000ece:	dc26      	bgt.n	8000f1e <_printf_common+0x96>
 8000ed0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000ed4:	6822      	ldr	r2, [r4, #0]
 8000ed6:	3b00      	subs	r3, #0
 8000ed8:	bf18      	it	ne
 8000eda:	2301      	movne	r3, #1
 8000edc:	0692      	lsls	r2, r2, #26
 8000ede:	d42b      	bmi.n	8000f38 <_printf_common+0xb0>
 8000ee0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000ee4:	4641      	mov	r1, r8
 8000ee6:	4638      	mov	r0, r7
 8000ee8:	47c8      	blx	r9
 8000eea:	3001      	adds	r0, #1
 8000eec:	d01e      	beq.n	8000f2c <_printf_common+0xa4>
 8000eee:	6823      	ldr	r3, [r4, #0]
 8000ef0:	6922      	ldr	r2, [r4, #16]
 8000ef2:	f003 0306 	and.w	r3, r3, #6
 8000ef6:	2b04      	cmp	r3, #4
 8000ef8:	bf02      	ittt	eq
 8000efa:	68e5      	ldreq	r5, [r4, #12]
 8000efc:	6833      	ldreq	r3, [r6, #0]
 8000efe:	1aed      	subeq	r5, r5, r3
 8000f00:	68a3      	ldr	r3, [r4, #8]
 8000f02:	bf0c      	ite	eq
 8000f04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f08:	2500      	movne	r5, #0
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	bfc4      	itt	gt
 8000f0e:	1a9b      	subgt	r3, r3, r2
 8000f10:	18ed      	addgt	r5, r5, r3
 8000f12:	2600      	movs	r6, #0
 8000f14:	341a      	adds	r4, #26
 8000f16:	42b5      	cmp	r5, r6
 8000f18:	d11a      	bne.n	8000f50 <_printf_common+0xc8>
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	e008      	b.n	8000f30 <_printf_common+0xa8>
 8000f1e:	2301      	movs	r3, #1
 8000f20:	4652      	mov	r2, sl
 8000f22:	4641      	mov	r1, r8
 8000f24:	4638      	mov	r0, r7
 8000f26:	47c8      	blx	r9
 8000f28:	3001      	adds	r0, #1
 8000f2a:	d103      	bne.n	8000f34 <_printf_common+0xac>
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	3501      	adds	r5, #1
 8000f36:	e7c6      	b.n	8000ec6 <_printf_common+0x3e>
 8000f38:	18e1      	adds	r1, r4, r3
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	2030      	movs	r0, #48	@ 0x30
 8000f3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000f42:	4422      	add	r2, r4
 8000f44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000f48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000f4c:	3302      	adds	r3, #2
 8000f4e:	e7c7      	b.n	8000ee0 <_printf_common+0x58>
 8000f50:	2301      	movs	r3, #1
 8000f52:	4622      	mov	r2, r4
 8000f54:	4641      	mov	r1, r8
 8000f56:	4638      	mov	r0, r7
 8000f58:	47c8      	blx	r9
 8000f5a:	3001      	adds	r0, #1
 8000f5c:	d0e6      	beq.n	8000f2c <_printf_common+0xa4>
 8000f5e:	3601      	adds	r6, #1
 8000f60:	e7d9      	b.n	8000f16 <_printf_common+0x8e>
	...

08000f64 <_printf_i>:
 8000f64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f68:	7e0f      	ldrb	r7, [r1, #24]
 8000f6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000f6c:	2f78      	cmp	r7, #120	@ 0x78
 8000f6e:	4691      	mov	r9, r2
 8000f70:	4680      	mov	r8, r0
 8000f72:	460c      	mov	r4, r1
 8000f74:	469a      	mov	sl, r3
 8000f76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000f7a:	d807      	bhi.n	8000f8c <_printf_i+0x28>
 8000f7c:	2f62      	cmp	r7, #98	@ 0x62
 8000f7e:	d80a      	bhi.n	8000f96 <_printf_i+0x32>
 8000f80:	2f00      	cmp	r7, #0
 8000f82:	f000 80d1 	beq.w	8001128 <_printf_i+0x1c4>
 8000f86:	2f58      	cmp	r7, #88	@ 0x58
 8000f88:	f000 80b8 	beq.w	80010fc <_printf_i+0x198>
 8000f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000f90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000f94:	e03a      	b.n	800100c <_printf_i+0xa8>
 8000f96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000f9a:	2b15      	cmp	r3, #21
 8000f9c:	d8f6      	bhi.n	8000f8c <_printf_i+0x28>
 8000f9e:	a101      	add	r1, pc, #4	@ (adr r1, 8000fa4 <_printf_i+0x40>)
 8000fa0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fa4:	08000ffd 	.word	0x08000ffd
 8000fa8:	08001011 	.word	0x08001011
 8000fac:	08000f8d 	.word	0x08000f8d
 8000fb0:	08000f8d 	.word	0x08000f8d
 8000fb4:	08000f8d 	.word	0x08000f8d
 8000fb8:	08000f8d 	.word	0x08000f8d
 8000fbc:	08001011 	.word	0x08001011
 8000fc0:	08000f8d 	.word	0x08000f8d
 8000fc4:	08000f8d 	.word	0x08000f8d
 8000fc8:	08000f8d 	.word	0x08000f8d
 8000fcc:	08000f8d 	.word	0x08000f8d
 8000fd0:	0800110f 	.word	0x0800110f
 8000fd4:	0800103b 	.word	0x0800103b
 8000fd8:	080010c9 	.word	0x080010c9
 8000fdc:	08000f8d 	.word	0x08000f8d
 8000fe0:	08000f8d 	.word	0x08000f8d
 8000fe4:	08001131 	.word	0x08001131
 8000fe8:	08000f8d 	.word	0x08000f8d
 8000fec:	0800103b 	.word	0x0800103b
 8000ff0:	08000f8d 	.word	0x08000f8d
 8000ff4:	08000f8d 	.word	0x08000f8d
 8000ff8:	080010d1 	.word	0x080010d1
 8000ffc:	6833      	ldr	r3, [r6, #0]
 8000ffe:	1d1a      	adds	r2, r3, #4
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6032      	str	r2, [r6, #0]
 8001004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001008:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800100c:	2301      	movs	r3, #1
 800100e:	e09c      	b.n	800114a <_printf_i+0x1e6>
 8001010:	6833      	ldr	r3, [r6, #0]
 8001012:	6820      	ldr	r0, [r4, #0]
 8001014:	1d19      	adds	r1, r3, #4
 8001016:	6031      	str	r1, [r6, #0]
 8001018:	0606      	lsls	r6, r0, #24
 800101a:	d501      	bpl.n	8001020 <_printf_i+0xbc>
 800101c:	681d      	ldr	r5, [r3, #0]
 800101e:	e003      	b.n	8001028 <_printf_i+0xc4>
 8001020:	0645      	lsls	r5, r0, #25
 8001022:	d5fb      	bpl.n	800101c <_printf_i+0xb8>
 8001024:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001028:	2d00      	cmp	r5, #0
 800102a:	da03      	bge.n	8001034 <_printf_i+0xd0>
 800102c:	232d      	movs	r3, #45	@ 0x2d
 800102e:	426d      	negs	r5, r5
 8001030:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001034:	4858      	ldr	r0, [pc, #352]	@ (8001198 <_printf_i+0x234>)
 8001036:	230a      	movs	r3, #10
 8001038:	e011      	b.n	800105e <_printf_i+0xfa>
 800103a:	6821      	ldr	r1, [r4, #0]
 800103c:	6833      	ldr	r3, [r6, #0]
 800103e:	0608      	lsls	r0, r1, #24
 8001040:	f853 5b04 	ldr.w	r5, [r3], #4
 8001044:	d402      	bmi.n	800104c <_printf_i+0xe8>
 8001046:	0649      	lsls	r1, r1, #25
 8001048:	bf48      	it	mi
 800104a:	b2ad      	uxthmi	r5, r5
 800104c:	2f6f      	cmp	r7, #111	@ 0x6f
 800104e:	4852      	ldr	r0, [pc, #328]	@ (8001198 <_printf_i+0x234>)
 8001050:	6033      	str	r3, [r6, #0]
 8001052:	bf14      	ite	ne
 8001054:	230a      	movne	r3, #10
 8001056:	2308      	moveq	r3, #8
 8001058:	2100      	movs	r1, #0
 800105a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800105e:	6866      	ldr	r6, [r4, #4]
 8001060:	60a6      	str	r6, [r4, #8]
 8001062:	2e00      	cmp	r6, #0
 8001064:	db05      	blt.n	8001072 <_printf_i+0x10e>
 8001066:	6821      	ldr	r1, [r4, #0]
 8001068:	432e      	orrs	r6, r5
 800106a:	f021 0104 	bic.w	r1, r1, #4
 800106e:	6021      	str	r1, [r4, #0]
 8001070:	d04b      	beq.n	800110a <_printf_i+0x1a6>
 8001072:	4616      	mov	r6, r2
 8001074:	fbb5 f1f3 	udiv	r1, r5, r3
 8001078:	fb03 5711 	mls	r7, r3, r1, r5
 800107c:	5dc7      	ldrb	r7, [r0, r7]
 800107e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001082:	462f      	mov	r7, r5
 8001084:	42bb      	cmp	r3, r7
 8001086:	460d      	mov	r5, r1
 8001088:	d9f4      	bls.n	8001074 <_printf_i+0x110>
 800108a:	2b08      	cmp	r3, #8
 800108c:	d10b      	bne.n	80010a6 <_printf_i+0x142>
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	07df      	lsls	r7, r3, #31
 8001092:	d508      	bpl.n	80010a6 <_printf_i+0x142>
 8001094:	6923      	ldr	r3, [r4, #16]
 8001096:	6861      	ldr	r1, [r4, #4]
 8001098:	4299      	cmp	r1, r3
 800109a:	bfde      	ittt	le
 800109c:	2330      	movle	r3, #48	@ 0x30
 800109e:	f806 3c01 	strble.w	r3, [r6, #-1]
 80010a2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80010a6:	1b92      	subs	r2, r2, r6
 80010a8:	6122      	str	r2, [r4, #16]
 80010aa:	f8cd a000 	str.w	sl, [sp]
 80010ae:	464b      	mov	r3, r9
 80010b0:	aa03      	add	r2, sp, #12
 80010b2:	4621      	mov	r1, r4
 80010b4:	4640      	mov	r0, r8
 80010b6:	f7ff fee7 	bl	8000e88 <_printf_common>
 80010ba:	3001      	adds	r0, #1
 80010bc:	d14a      	bne.n	8001154 <_printf_i+0x1f0>
 80010be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010c2:	b004      	add	sp, #16
 80010c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c8:	6823      	ldr	r3, [r4, #0]
 80010ca:	f043 0320 	orr.w	r3, r3, #32
 80010ce:	6023      	str	r3, [r4, #0]
 80010d0:	4832      	ldr	r0, [pc, #200]	@ (800119c <_printf_i+0x238>)
 80010d2:	2778      	movs	r7, #120	@ 0x78
 80010d4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80010d8:	6823      	ldr	r3, [r4, #0]
 80010da:	6831      	ldr	r1, [r6, #0]
 80010dc:	061f      	lsls	r7, r3, #24
 80010de:	f851 5b04 	ldr.w	r5, [r1], #4
 80010e2:	d402      	bmi.n	80010ea <_printf_i+0x186>
 80010e4:	065f      	lsls	r7, r3, #25
 80010e6:	bf48      	it	mi
 80010e8:	b2ad      	uxthmi	r5, r5
 80010ea:	6031      	str	r1, [r6, #0]
 80010ec:	07d9      	lsls	r1, r3, #31
 80010ee:	bf44      	itt	mi
 80010f0:	f043 0320 	orrmi.w	r3, r3, #32
 80010f4:	6023      	strmi	r3, [r4, #0]
 80010f6:	b11d      	cbz	r5, 8001100 <_printf_i+0x19c>
 80010f8:	2310      	movs	r3, #16
 80010fa:	e7ad      	b.n	8001058 <_printf_i+0xf4>
 80010fc:	4826      	ldr	r0, [pc, #152]	@ (8001198 <_printf_i+0x234>)
 80010fe:	e7e9      	b.n	80010d4 <_printf_i+0x170>
 8001100:	6823      	ldr	r3, [r4, #0]
 8001102:	f023 0320 	bic.w	r3, r3, #32
 8001106:	6023      	str	r3, [r4, #0]
 8001108:	e7f6      	b.n	80010f8 <_printf_i+0x194>
 800110a:	4616      	mov	r6, r2
 800110c:	e7bd      	b.n	800108a <_printf_i+0x126>
 800110e:	6833      	ldr	r3, [r6, #0]
 8001110:	6825      	ldr	r5, [r4, #0]
 8001112:	6961      	ldr	r1, [r4, #20]
 8001114:	1d18      	adds	r0, r3, #4
 8001116:	6030      	str	r0, [r6, #0]
 8001118:	062e      	lsls	r6, r5, #24
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	d501      	bpl.n	8001122 <_printf_i+0x1be>
 800111e:	6019      	str	r1, [r3, #0]
 8001120:	e002      	b.n	8001128 <_printf_i+0x1c4>
 8001122:	0668      	lsls	r0, r5, #25
 8001124:	d5fb      	bpl.n	800111e <_printf_i+0x1ba>
 8001126:	8019      	strh	r1, [r3, #0]
 8001128:	2300      	movs	r3, #0
 800112a:	6123      	str	r3, [r4, #16]
 800112c:	4616      	mov	r6, r2
 800112e:	e7bc      	b.n	80010aa <_printf_i+0x146>
 8001130:	6833      	ldr	r3, [r6, #0]
 8001132:	1d1a      	adds	r2, r3, #4
 8001134:	6032      	str	r2, [r6, #0]
 8001136:	681e      	ldr	r6, [r3, #0]
 8001138:	6862      	ldr	r2, [r4, #4]
 800113a:	2100      	movs	r1, #0
 800113c:	4630      	mov	r0, r6
 800113e:	f7ff f867 	bl	8000210 <memchr>
 8001142:	b108      	cbz	r0, 8001148 <_printf_i+0x1e4>
 8001144:	1b80      	subs	r0, r0, r6
 8001146:	6060      	str	r0, [r4, #4]
 8001148:	6863      	ldr	r3, [r4, #4]
 800114a:	6123      	str	r3, [r4, #16]
 800114c:	2300      	movs	r3, #0
 800114e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001152:	e7aa      	b.n	80010aa <_printf_i+0x146>
 8001154:	6923      	ldr	r3, [r4, #16]
 8001156:	4632      	mov	r2, r6
 8001158:	4649      	mov	r1, r9
 800115a:	4640      	mov	r0, r8
 800115c:	47d0      	blx	sl
 800115e:	3001      	adds	r0, #1
 8001160:	d0ad      	beq.n	80010be <_printf_i+0x15a>
 8001162:	6823      	ldr	r3, [r4, #0]
 8001164:	079b      	lsls	r3, r3, #30
 8001166:	d413      	bmi.n	8001190 <_printf_i+0x22c>
 8001168:	68e0      	ldr	r0, [r4, #12]
 800116a:	9b03      	ldr	r3, [sp, #12]
 800116c:	4298      	cmp	r0, r3
 800116e:	bfb8      	it	lt
 8001170:	4618      	movlt	r0, r3
 8001172:	e7a6      	b.n	80010c2 <_printf_i+0x15e>
 8001174:	2301      	movs	r3, #1
 8001176:	4632      	mov	r2, r6
 8001178:	4649      	mov	r1, r9
 800117a:	4640      	mov	r0, r8
 800117c:	47d0      	blx	sl
 800117e:	3001      	adds	r0, #1
 8001180:	d09d      	beq.n	80010be <_printf_i+0x15a>
 8001182:	3501      	adds	r5, #1
 8001184:	68e3      	ldr	r3, [r4, #12]
 8001186:	9903      	ldr	r1, [sp, #12]
 8001188:	1a5b      	subs	r3, r3, r1
 800118a:	42ab      	cmp	r3, r5
 800118c:	dcf2      	bgt.n	8001174 <_printf_i+0x210>
 800118e:	e7eb      	b.n	8001168 <_printf_i+0x204>
 8001190:	2500      	movs	r5, #0
 8001192:	f104 0619 	add.w	r6, r4, #25
 8001196:	e7f5      	b.n	8001184 <_printf_i+0x220>
 8001198:	08001741 	.word	0x08001741
 800119c:	08001752 	.word	0x08001752

080011a0 <__sflush_r>:
 80011a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80011a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011a8:	0716      	lsls	r6, r2, #28
 80011aa:	4605      	mov	r5, r0
 80011ac:	460c      	mov	r4, r1
 80011ae:	d454      	bmi.n	800125a <__sflush_r+0xba>
 80011b0:	684b      	ldr	r3, [r1, #4]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	dc02      	bgt.n	80011bc <__sflush_r+0x1c>
 80011b6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	dd48      	ble.n	800124e <__sflush_r+0xae>
 80011bc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011be:	2e00      	cmp	r6, #0
 80011c0:	d045      	beq.n	800124e <__sflush_r+0xae>
 80011c2:	2300      	movs	r3, #0
 80011c4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80011c8:	682f      	ldr	r7, [r5, #0]
 80011ca:	6a21      	ldr	r1, [r4, #32]
 80011cc:	602b      	str	r3, [r5, #0]
 80011ce:	d030      	beq.n	8001232 <__sflush_r+0x92>
 80011d0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80011d2:	89a3      	ldrh	r3, [r4, #12]
 80011d4:	0759      	lsls	r1, r3, #29
 80011d6:	d505      	bpl.n	80011e4 <__sflush_r+0x44>
 80011d8:	6863      	ldr	r3, [r4, #4]
 80011da:	1ad2      	subs	r2, r2, r3
 80011dc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80011de:	b10b      	cbz	r3, 80011e4 <__sflush_r+0x44>
 80011e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80011e2:	1ad2      	subs	r2, r2, r3
 80011e4:	2300      	movs	r3, #0
 80011e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80011e8:	6a21      	ldr	r1, [r4, #32]
 80011ea:	4628      	mov	r0, r5
 80011ec:	47b0      	blx	r6
 80011ee:	1c43      	adds	r3, r0, #1
 80011f0:	89a3      	ldrh	r3, [r4, #12]
 80011f2:	d106      	bne.n	8001202 <__sflush_r+0x62>
 80011f4:	6829      	ldr	r1, [r5, #0]
 80011f6:	291d      	cmp	r1, #29
 80011f8:	d82b      	bhi.n	8001252 <__sflush_r+0xb2>
 80011fa:	4a2a      	ldr	r2, [pc, #168]	@ (80012a4 <__sflush_r+0x104>)
 80011fc:	40ca      	lsrs	r2, r1
 80011fe:	07d6      	lsls	r6, r2, #31
 8001200:	d527      	bpl.n	8001252 <__sflush_r+0xb2>
 8001202:	2200      	movs	r2, #0
 8001204:	6062      	str	r2, [r4, #4]
 8001206:	04d9      	lsls	r1, r3, #19
 8001208:	6922      	ldr	r2, [r4, #16]
 800120a:	6022      	str	r2, [r4, #0]
 800120c:	d504      	bpl.n	8001218 <__sflush_r+0x78>
 800120e:	1c42      	adds	r2, r0, #1
 8001210:	d101      	bne.n	8001216 <__sflush_r+0x76>
 8001212:	682b      	ldr	r3, [r5, #0]
 8001214:	b903      	cbnz	r3, 8001218 <__sflush_r+0x78>
 8001216:	6560      	str	r0, [r4, #84]	@ 0x54
 8001218:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800121a:	602f      	str	r7, [r5, #0]
 800121c:	b1b9      	cbz	r1, 800124e <__sflush_r+0xae>
 800121e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001222:	4299      	cmp	r1, r3
 8001224:	d002      	beq.n	800122c <__sflush_r+0x8c>
 8001226:	4628      	mov	r0, r5
 8001228:	f000 fa24 	bl	8001674 <_free_r>
 800122c:	2300      	movs	r3, #0
 800122e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001230:	e00d      	b.n	800124e <__sflush_r+0xae>
 8001232:	2301      	movs	r3, #1
 8001234:	4628      	mov	r0, r5
 8001236:	47b0      	blx	r6
 8001238:	4602      	mov	r2, r0
 800123a:	1c50      	adds	r0, r2, #1
 800123c:	d1c9      	bne.n	80011d2 <__sflush_r+0x32>
 800123e:	682b      	ldr	r3, [r5, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d0c6      	beq.n	80011d2 <__sflush_r+0x32>
 8001244:	2b1d      	cmp	r3, #29
 8001246:	d001      	beq.n	800124c <__sflush_r+0xac>
 8001248:	2b16      	cmp	r3, #22
 800124a:	d11e      	bne.n	800128a <__sflush_r+0xea>
 800124c:	602f      	str	r7, [r5, #0]
 800124e:	2000      	movs	r0, #0
 8001250:	e022      	b.n	8001298 <__sflush_r+0xf8>
 8001252:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001256:	b21b      	sxth	r3, r3
 8001258:	e01b      	b.n	8001292 <__sflush_r+0xf2>
 800125a:	690f      	ldr	r7, [r1, #16]
 800125c:	2f00      	cmp	r7, #0
 800125e:	d0f6      	beq.n	800124e <__sflush_r+0xae>
 8001260:	0793      	lsls	r3, r2, #30
 8001262:	680e      	ldr	r6, [r1, #0]
 8001264:	bf08      	it	eq
 8001266:	694b      	ldreq	r3, [r1, #20]
 8001268:	600f      	str	r7, [r1, #0]
 800126a:	bf18      	it	ne
 800126c:	2300      	movne	r3, #0
 800126e:	eba6 0807 	sub.w	r8, r6, r7
 8001272:	608b      	str	r3, [r1, #8]
 8001274:	f1b8 0f00 	cmp.w	r8, #0
 8001278:	dde9      	ble.n	800124e <__sflush_r+0xae>
 800127a:	6a21      	ldr	r1, [r4, #32]
 800127c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800127e:	4643      	mov	r3, r8
 8001280:	463a      	mov	r2, r7
 8001282:	4628      	mov	r0, r5
 8001284:	47b0      	blx	r6
 8001286:	2800      	cmp	r0, #0
 8001288:	dc08      	bgt.n	800129c <__sflush_r+0xfc>
 800128a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800128e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001292:	81a3      	strh	r3, [r4, #12]
 8001294:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800129c:	4407      	add	r7, r0
 800129e:	eba8 0800 	sub.w	r8, r8, r0
 80012a2:	e7e7      	b.n	8001274 <__sflush_r+0xd4>
 80012a4:	20400001 	.word	0x20400001

080012a8 <_fflush_r>:
 80012a8:	b538      	push	{r3, r4, r5, lr}
 80012aa:	690b      	ldr	r3, [r1, #16]
 80012ac:	4605      	mov	r5, r0
 80012ae:	460c      	mov	r4, r1
 80012b0:	b913      	cbnz	r3, 80012b8 <_fflush_r+0x10>
 80012b2:	2500      	movs	r5, #0
 80012b4:	4628      	mov	r0, r5
 80012b6:	bd38      	pop	{r3, r4, r5, pc}
 80012b8:	b118      	cbz	r0, 80012c2 <_fflush_r+0x1a>
 80012ba:	6a03      	ldr	r3, [r0, #32]
 80012bc:	b90b      	cbnz	r3, 80012c2 <_fflush_r+0x1a>
 80012be:	f7ff fb83 	bl	80009c8 <__sinit>
 80012c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d0f3      	beq.n	80012b2 <_fflush_r+0xa>
 80012ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80012cc:	07d0      	lsls	r0, r2, #31
 80012ce:	d404      	bmi.n	80012da <_fflush_r+0x32>
 80012d0:	0599      	lsls	r1, r3, #22
 80012d2:	d402      	bmi.n	80012da <_fflush_r+0x32>
 80012d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012d6:	f7ff fbf2 	bl	8000abe <__retarget_lock_acquire_recursive>
 80012da:	4628      	mov	r0, r5
 80012dc:	4621      	mov	r1, r4
 80012de:	f7ff ff5f 	bl	80011a0 <__sflush_r>
 80012e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80012e4:	07da      	lsls	r2, r3, #31
 80012e6:	4605      	mov	r5, r0
 80012e8:	d4e4      	bmi.n	80012b4 <_fflush_r+0xc>
 80012ea:	89a3      	ldrh	r3, [r4, #12]
 80012ec:	059b      	lsls	r3, r3, #22
 80012ee:	d4e1      	bmi.n	80012b4 <_fflush_r+0xc>
 80012f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80012f2:	f7ff fbe5 	bl	8000ac0 <__retarget_lock_release_recursive>
 80012f6:	e7dd      	b.n	80012b4 <_fflush_r+0xc>

080012f8 <__malloc_lock>:
 80012f8:	4801      	ldr	r0, [pc, #4]	@ (8001300 <__malloc_lock+0x8>)
 80012fa:	f7ff bbe0 	b.w	8000abe <__retarget_lock_acquire_recursive>
 80012fe:	bf00      	nop
 8001300:	200001b8 	.word	0x200001b8

08001304 <__malloc_unlock>:
 8001304:	4801      	ldr	r0, [pc, #4]	@ (800130c <__malloc_unlock+0x8>)
 8001306:	f7ff bbdb 	b.w	8000ac0 <__retarget_lock_release_recursive>
 800130a:	bf00      	nop
 800130c:	200001b8 	.word	0x200001b8

08001310 <__sread>:
 8001310:	b510      	push	{r4, lr}
 8001312:	460c      	mov	r4, r1
 8001314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001318:	f000 f956 	bl	80015c8 <_read_r>
 800131c:	2800      	cmp	r0, #0
 800131e:	bfab      	itete	ge
 8001320:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8001322:	89a3      	ldrhlt	r3, [r4, #12]
 8001324:	181b      	addge	r3, r3, r0
 8001326:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800132a:	bfac      	ite	ge
 800132c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800132e:	81a3      	strhlt	r3, [r4, #12]
 8001330:	bd10      	pop	{r4, pc}

08001332 <__swrite>:
 8001332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001336:	461f      	mov	r7, r3
 8001338:	898b      	ldrh	r3, [r1, #12]
 800133a:	05db      	lsls	r3, r3, #23
 800133c:	4605      	mov	r5, r0
 800133e:	460c      	mov	r4, r1
 8001340:	4616      	mov	r6, r2
 8001342:	d505      	bpl.n	8001350 <__swrite+0x1e>
 8001344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001348:	2302      	movs	r3, #2
 800134a:	2200      	movs	r2, #0
 800134c:	f000 f92a 	bl	80015a4 <_lseek_r>
 8001350:	89a3      	ldrh	r3, [r4, #12]
 8001352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001356:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800135a:	81a3      	strh	r3, [r4, #12]
 800135c:	4632      	mov	r2, r6
 800135e:	463b      	mov	r3, r7
 8001360:	4628      	mov	r0, r5
 8001362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001366:	f000 b951 	b.w	800160c <_write_r>

0800136a <__sseek>:
 800136a:	b510      	push	{r4, lr}
 800136c:	460c      	mov	r4, r1
 800136e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001372:	f000 f917 	bl	80015a4 <_lseek_r>
 8001376:	1c43      	adds	r3, r0, #1
 8001378:	89a3      	ldrh	r3, [r4, #12]
 800137a:	bf15      	itete	ne
 800137c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800137e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001382:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001386:	81a3      	strheq	r3, [r4, #12]
 8001388:	bf18      	it	ne
 800138a:	81a3      	strhne	r3, [r4, #12]
 800138c:	bd10      	pop	{r4, pc}

0800138e <__sclose>:
 800138e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001392:	f000 b94d 	b.w	8001630 <_close_r>

08001396 <__swbuf_r>:
 8001396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001398:	460e      	mov	r6, r1
 800139a:	4614      	mov	r4, r2
 800139c:	4605      	mov	r5, r0
 800139e:	b118      	cbz	r0, 80013a8 <__swbuf_r+0x12>
 80013a0:	6a03      	ldr	r3, [r0, #32]
 80013a2:	b90b      	cbnz	r3, 80013a8 <__swbuf_r+0x12>
 80013a4:	f7ff fb10 	bl	80009c8 <__sinit>
 80013a8:	69a3      	ldr	r3, [r4, #24]
 80013aa:	60a3      	str	r3, [r4, #8]
 80013ac:	89a3      	ldrh	r3, [r4, #12]
 80013ae:	071a      	lsls	r2, r3, #28
 80013b0:	d501      	bpl.n	80013b6 <__swbuf_r+0x20>
 80013b2:	6923      	ldr	r3, [r4, #16]
 80013b4:	b943      	cbnz	r3, 80013c8 <__swbuf_r+0x32>
 80013b6:	4621      	mov	r1, r4
 80013b8:	4628      	mov	r0, r5
 80013ba:	f000 f82b 	bl	8001414 <__swsetup_r>
 80013be:	b118      	cbz	r0, 80013c8 <__swbuf_r+0x32>
 80013c0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80013c4:	4638      	mov	r0, r7
 80013c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80013c8:	6823      	ldr	r3, [r4, #0]
 80013ca:	6922      	ldr	r2, [r4, #16]
 80013cc:	1a98      	subs	r0, r3, r2
 80013ce:	6963      	ldr	r3, [r4, #20]
 80013d0:	b2f6      	uxtb	r6, r6
 80013d2:	4283      	cmp	r3, r0
 80013d4:	4637      	mov	r7, r6
 80013d6:	dc05      	bgt.n	80013e4 <__swbuf_r+0x4e>
 80013d8:	4621      	mov	r1, r4
 80013da:	4628      	mov	r0, r5
 80013dc:	f7ff ff64 	bl	80012a8 <_fflush_r>
 80013e0:	2800      	cmp	r0, #0
 80013e2:	d1ed      	bne.n	80013c0 <__swbuf_r+0x2a>
 80013e4:	68a3      	ldr	r3, [r4, #8]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	60a3      	str	r3, [r4, #8]
 80013ea:	6823      	ldr	r3, [r4, #0]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	6022      	str	r2, [r4, #0]
 80013f0:	701e      	strb	r6, [r3, #0]
 80013f2:	6962      	ldr	r2, [r4, #20]
 80013f4:	1c43      	adds	r3, r0, #1
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d004      	beq.n	8001404 <__swbuf_r+0x6e>
 80013fa:	89a3      	ldrh	r3, [r4, #12]
 80013fc:	07db      	lsls	r3, r3, #31
 80013fe:	d5e1      	bpl.n	80013c4 <__swbuf_r+0x2e>
 8001400:	2e0a      	cmp	r6, #10
 8001402:	d1df      	bne.n	80013c4 <__swbuf_r+0x2e>
 8001404:	4621      	mov	r1, r4
 8001406:	4628      	mov	r0, r5
 8001408:	f7ff ff4e 	bl	80012a8 <_fflush_r>
 800140c:	2800      	cmp	r0, #0
 800140e:	d0d9      	beq.n	80013c4 <__swbuf_r+0x2e>
 8001410:	e7d6      	b.n	80013c0 <__swbuf_r+0x2a>
	...

08001414 <__swsetup_r>:
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4b29      	ldr	r3, [pc, #164]	@ (80014bc <__swsetup_r+0xa8>)
 8001418:	4605      	mov	r5, r0
 800141a:	6818      	ldr	r0, [r3, #0]
 800141c:	460c      	mov	r4, r1
 800141e:	b118      	cbz	r0, 8001428 <__swsetup_r+0x14>
 8001420:	6a03      	ldr	r3, [r0, #32]
 8001422:	b90b      	cbnz	r3, 8001428 <__swsetup_r+0x14>
 8001424:	f7ff fad0 	bl	80009c8 <__sinit>
 8001428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800142c:	0719      	lsls	r1, r3, #28
 800142e:	d422      	bmi.n	8001476 <__swsetup_r+0x62>
 8001430:	06da      	lsls	r2, r3, #27
 8001432:	d407      	bmi.n	8001444 <__swsetup_r+0x30>
 8001434:	2209      	movs	r2, #9
 8001436:	602a      	str	r2, [r5, #0]
 8001438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800143c:	81a3      	strh	r3, [r4, #12]
 800143e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001442:	e033      	b.n	80014ac <__swsetup_r+0x98>
 8001444:	0758      	lsls	r0, r3, #29
 8001446:	d512      	bpl.n	800146e <__swsetup_r+0x5a>
 8001448:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800144a:	b141      	cbz	r1, 800145e <__swsetup_r+0x4a>
 800144c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001450:	4299      	cmp	r1, r3
 8001452:	d002      	beq.n	800145a <__swsetup_r+0x46>
 8001454:	4628      	mov	r0, r5
 8001456:	f000 f90d 	bl	8001674 <_free_r>
 800145a:	2300      	movs	r3, #0
 800145c:	6363      	str	r3, [r4, #52]	@ 0x34
 800145e:	89a3      	ldrh	r3, [r4, #12]
 8001460:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001464:	81a3      	strh	r3, [r4, #12]
 8001466:	2300      	movs	r3, #0
 8001468:	6063      	str	r3, [r4, #4]
 800146a:	6923      	ldr	r3, [r4, #16]
 800146c:	6023      	str	r3, [r4, #0]
 800146e:	89a3      	ldrh	r3, [r4, #12]
 8001470:	f043 0308 	orr.w	r3, r3, #8
 8001474:	81a3      	strh	r3, [r4, #12]
 8001476:	6923      	ldr	r3, [r4, #16]
 8001478:	b94b      	cbnz	r3, 800148e <__swsetup_r+0x7a>
 800147a:	89a3      	ldrh	r3, [r4, #12]
 800147c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001480:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001484:	d003      	beq.n	800148e <__swsetup_r+0x7a>
 8001486:	4621      	mov	r1, r4
 8001488:	4628      	mov	r0, r5
 800148a:	f000 f83f 	bl	800150c <__smakebuf_r>
 800148e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001492:	f013 0201 	ands.w	r2, r3, #1
 8001496:	d00a      	beq.n	80014ae <__swsetup_r+0x9a>
 8001498:	2200      	movs	r2, #0
 800149a:	60a2      	str	r2, [r4, #8]
 800149c:	6962      	ldr	r2, [r4, #20]
 800149e:	4252      	negs	r2, r2
 80014a0:	61a2      	str	r2, [r4, #24]
 80014a2:	6922      	ldr	r2, [r4, #16]
 80014a4:	b942      	cbnz	r2, 80014b8 <__swsetup_r+0xa4>
 80014a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80014aa:	d1c5      	bne.n	8001438 <__swsetup_r+0x24>
 80014ac:	bd38      	pop	{r3, r4, r5, pc}
 80014ae:	0799      	lsls	r1, r3, #30
 80014b0:	bf58      	it	pl
 80014b2:	6962      	ldrpl	r2, [r4, #20]
 80014b4:	60a2      	str	r2, [r4, #8]
 80014b6:	e7f4      	b.n	80014a2 <__swsetup_r+0x8e>
 80014b8:	2000      	movs	r0, #0
 80014ba:	e7f7      	b.n	80014ac <__swsetup_r+0x98>
 80014bc:	2000000c 	.word	0x2000000c

080014c0 <__swhatbuf_r>:
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	460c      	mov	r4, r1
 80014c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014c8:	2900      	cmp	r1, #0
 80014ca:	b096      	sub	sp, #88	@ 0x58
 80014cc:	4615      	mov	r5, r2
 80014ce:	461e      	mov	r6, r3
 80014d0:	da0d      	bge.n	80014ee <__swhatbuf_r+0x2e>
 80014d2:	89a3      	ldrh	r3, [r4, #12]
 80014d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80014d8:	f04f 0100 	mov.w	r1, #0
 80014dc:	bf14      	ite	ne
 80014de:	2340      	movne	r3, #64	@ 0x40
 80014e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80014e4:	2000      	movs	r0, #0
 80014e6:	6031      	str	r1, [r6, #0]
 80014e8:	602b      	str	r3, [r5, #0]
 80014ea:	b016      	add	sp, #88	@ 0x58
 80014ec:	bd70      	pop	{r4, r5, r6, pc}
 80014ee:	466a      	mov	r2, sp
 80014f0:	f000 f8ae 	bl	8001650 <_fstat_r>
 80014f4:	2800      	cmp	r0, #0
 80014f6:	dbec      	blt.n	80014d2 <__swhatbuf_r+0x12>
 80014f8:	9901      	ldr	r1, [sp, #4]
 80014fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80014fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001502:	4259      	negs	r1, r3
 8001504:	4159      	adcs	r1, r3
 8001506:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800150a:	e7eb      	b.n	80014e4 <__swhatbuf_r+0x24>

0800150c <__smakebuf_r>:
 800150c:	898b      	ldrh	r3, [r1, #12]
 800150e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001510:	079d      	lsls	r5, r3, #30
 8001512:	4606      	mov	r6, r0
 8001514:	460c      	mov	r4, r1
 8001516:	d507      	bpl.n	8001528 <__smakebuf_r+0x1c>
 8001518:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800151c:	6023      	str	r3, [r4, #0]
 800151e:	6123      	str	r3, [r4, #16]
 8001520:	2301      	movs	r3, #1
 8001522:	6163      	str	r3, [r4, #20]
 8001524:	b003      	add	sp, #12
 8001526:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001528:	ab01      	add	r3, sp, #4
 800152a:	466a      	mov	r2, sp
 800152c:	f7ff ffc8 	bl	80014c0 <__swhatbuf_r>
 8001530:	9f00      	ldr	r7, [sp, #0]
 8001532:	4605      	mov	r5, r0
 8001534:	4639      	mov	r1, r7
 8001536:	4630      	mov	r0, r6
 8001538:	f7ff fc26 	bl	8000d88 <_malloc_r>
 800153c:	b948      	cbnz	r0, 8001552 <__smakebuf_r+0x46>
 800153e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001542:	059a      	lsls	r2, r3, #22
 8001544:	d4ee      	bmi.n	8001524 <__smakebuf_r+0x18>
 8001546:	f023 0303 	bic.w	r3, r3, #3
 800154a:	f043 0302 	orr.w	r3, r3, #2
 800154e:	81a3      	strh	r3, [r4, #12]
 8001550:	e7e2      	b.n	8001518 <__smakebuf_r+0xc>
 8001552:	89a3      	ldrh	r3, [r4, #12]
 8001554:	6020      	str	r0, [r4, #0]
 8001556:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800155a:	81a3      	strh	r3, [r4, #12]
 800155c:	9b01      	ldr	r3, [sp, #4]
 800155e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001562:	b15b      	cbz	r3, 800157c <__smakebuf_r+0x70>
 8001564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001568:	4630      	mov	r0, r6
 800156a:	f000 f80b 	bl	8001584 <_isatty_r>
 800156e:	b128      	cbz	r0, 800157c <__smakebuf_r+0x70>
 8001570:	89a3      	ldrh	r3, [r4, #12]
 8001572:	f023 0303 	bic.w	r3, r3, #3
 8001576:	f043 0301 	orr.w	r3, r3, #1
 800157a:	81a3      	strh	r3, [r4, #12]
 800157c:	89a3      	ldrh	r3, [r4, #12]
 800157e:	431d      	orrs	r5, r3
 8001580:	81a5      	strh	r5, [r4, #12]
 8001582:	e7cf      	b.n	8001524 <__smakebuf_r+0x18>

08001584 <_isatty_r>:
 8001584:	b538      	push	{r3, r4, r5, lr}
 8001586:	4d06      	ldr	r5, [pc, #24]	@ (80015a0 <_isatty_r+0x1c>)
 8001588:	2300      	movs	r3, #0
 800158a:	4604      	mov	r4, r0
 800158c:	4608      	mov	r0, r1
 800158e:	602b      	str	r3, [r5, #0]
 8001590:	f7ff f87f 	bl	8000692 <_isatty>
 8001594:	1c43      	adds	r3, r0, #1
 8001596:	d102      	bne.n	800159e <_isatty_r+0x1a>
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	b103      	cbz	r3, 800159e <_isatty_r+0x1a>
 800159c:	6023      	str	r3, [r4, #0]
 800159e:	bd38      	pop	{r3, r4, r5, pc}
 80015a0:	200001c4 	.word	0x200001c4

080015a4 <_lseek_r>:
 80015a4:	b538      	push	{r3, r4, r5, lr}
 80015a6:	4d07      	ldr	r5, [pc, #28]	@ (80015c4 <_lseek_r+0x20>)
 80015a8:	4604      	mov	r4, r0
 80015aa:	4608      	mov	r0, r1
 80015ac:	4611      	mov	r1, r2
 80015ae:	2200      	movs	r2, #0
 80015b0:	602a      	str	r2, [r5, #0]
 80015b2:	461a      	mov	r2, r3
 80015b4:	f7ff f878 	bl	80006a8 <_lseek>
 80015b8:	1c43      	adds	r3, r0, #1
 80015ba:	d102      	bne.n	80015c2 <_lseek_r+0x1e>
 80015bc:	682b      	ldr	r3, [r5, #0]
 80015be:	b103      	cbz	r3, 80015c2 <_lseek_r+0x1e>
 80015c0:	6023      	str	r3, [r4, #0]
 80015c2:	bd38      	pop	{r3, r4, r5, pc}
 80015c4:	200001c4 	.word	0x200001c4

080015c8 <_read_r>:
 80015c8:	b538      	push	{r3, r4, r5, lr}
 80015ca:	4d07      	ldr	r5, [pc, #28]	@ (80015e8 <_read_r+0x20>)
 80015cc:	4604      	mov	r4, r0
 80015ce:	4608      	mov	r0, r1
 80015d0:	4611      	mov	r1, r2
 80015d2:	2200      	movs	r2, #0
 80015d4:	602a      	str	r2, [r5, #0]
 80015d6:	461a      	mov	r2, r3
 80015d8:	f7ff f806 	bl	80005e8 <_read>
 80015dc:	1c43      	adds	r3, r0, #1
 80015de:	d102      	bne.n	80015e6 <_read_r+0x1e>
 80015e0:	682b      	ldr	r3, [r5, #0]
 80015e2:	b103      	cbz	r3, 80015e6 <_read_r+0x1e>
 80015e4:	6023      	str	r3, [r4, #0]
 80015e6:	bd38      	pop	{r3, r4, r5, pc}
 80015e8:	200001c4 	.word	0x200001c4

080015ec <_sbrk_r>:
 80015ec:	b538      	push	{r3, r4, r5, lr}
 80015ee:	4d06      	ldr	r5, [pc, #24]	@ (8001608 <_sbrk_r+0x1c>)
 80015f0:	2300      	movs	r3, #0
 80015f2:	4604      	mov	r4, r0
 80015f4:	4608      	mov	r0, r1
 80015f6:	602b      	str	r3, [r5, #0]
 80015f8:	f7ff f864 	bl	80006c4 <_sbrk>
 80015fc:	1c43      	adds	r3, r0, #1
 80015fe:	d102      	bne.n	8001606 <_sbrk_r+0x1a>
 8001600:	682b      	ldr	r3, [r5, #0]
 8001602:	b103      	cbz	r3, 8001606 <_sbrk_r+0x1a>
 8001604:	6023      	str	r3, [r4, #0]
 8001606:	bd38      	pop	{r3, r4, r5, pc}
 8001608:	200001c4 	.word	0x200001c4

0800160c <_write_r>:
 800160c:	b538      	push	{r3, r4, r5, lr}
 800160e:	4d07      	ldr	r5, [pc, #28]	@ (800162c <_write_r+0x20>)
 8001610:	4604      	mov	r4, r0
 8001612:	4608      	mov	r0, r1
 8001614:	4611      	mov	r1, r2
 8001616:	2200      	movs	r2, #0
 8001618:	602a      	str	r2, [r5, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	f7ff f801 	bl	8000622 <_write>
 8001620:	1c43      	adds	r3, r0, #1
 8001622:	d102      	bne.n	800162a <_write_r+0x1e>
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	b103      	cbz	r3, 800162a <_write_r+0x1e>
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	bd38      	pop	{r3, r4, r5, pc}
 800162c:	200001c4 	.word	0x200001c4

08001630 <_close_r>:
 8001630:	b538      	push	{r3, r4, r5, lr}
 8001632:	4d06      	ldr	r5, [pc, #24]	@ (800164c <_close_r+0x1c>)
 8001634:	2300      	movs	r3, #0
 8001636:	4604      	mov	r4, r0
 8001638:	4608      	mov	r0, r1
 800163a:	602b      	str	r3, [r5, #0]
 800163c:	f7ff f80d 	bl	800065a <_close>
 8001640:	1c43      	adds	r3, r0, #1
 8001642:	d102      	bne.n	800164a <_close_r+0x1a>
 8001644:	682b      	ldr	r3, [r5, #0]
 8001646:	b103      	cbz	r3, 800164a <_close_r+0x1a>
 8001648:	6023      	str	r3, [r4, #0]
 800164a:	bd38      	pop	{r3, r4, r5, pc}
 800164c:	200001c4 	.word	0x200001c4

08001650 <_fstat_r>:
 8001650:	b538      	push	{r3, r4, r5, lr}
 8001652:	4d07      	ldr	r5, [pc, #28]	@ (8001670 <_fstat_r+0x20>)
 8001654:	2300      	movs	r3, #0
 8001656:	4604      	mov	r4, r0
 8001658:	4608      	mov	r0, r1
 800165a:	4611      	mov	r1, r2
 800165c:	602b      	str	r3, [r5, #0]
 800165e:	f7ff f808 	bl	8000672 <_fstat>
 8001662:	1c43      	adds	r3, r0, #1
 8001664:	d102      	bne.n	800166c <_fstat_r+0x1c>
 8001666:	682b      	ldr	r3, [r5, #0]
 8001668:	b103      	cbz	r3, 800166c <_fstat_r+0x1c>
 800166a:	6023      	str	r3, [r4, #0]
 800166c:	bd38      	pop	{r3, r4, r5, pc}
 800166e:	bf00      	nop
 8001670:	200001c4 	.word	0x200001c4

08001674 <_free_r>:
 8001674:	b538      	push	{r3, r4, r5, lr}
 8001676:	4605      	mov	r5, r0
 8001678:	2900      	cmp	r1, #0
 800167a:	d041      	beq.n	8001700 <_free_r+0x8c>
 800167c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001680:	1f0c      	subs	r4, r1, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	bfb8      	it	lt
 8001686:	18e4      	addlt	r4, r4, r3
 8001688:	f7ff fe36 	bl	80012f8 <__malloc_lock>
 800168c:	4a1d      	ldr	r2, [pc, #116]	@ (8001704 <_free_r+0x90>)
 800168e:	6813      	ldr	r3, [r2, #0]
 8001690:	b933      	cbnz	r3, 80016a0 <_free_r+0x2c>
 8001692:	6063      	str	r3, [r4, #4]
 8001694:	6014      	str	r4, [r2, #0]
 8001696:	4628      	mov	r0, r5
 8001698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800169c:	f7ff be32 	b.w	8001304 <__malloc_unlock>
 80016a0:	42a3      	cmp	r3, r4
 80016a2:	d908      	bls.n	80016b6 <_free_r+0x42>
 80016a4:	6820      	ldr	r0, [r4, #0]
 80016a6:	1821      	adds	r1, r4, r0
 80016a8:	428b      	cmp	r3, r1
 80016aa:	bf01      	itttt	eq
 80016ac:	6819      	ldreq	r1, [r3, #0]
 80016ae:	685b      	ldreq	r3, [r3, #4]
 80016b0:	1809      	addeq	r1, r1, r0
 80016b2:	6021      	streq	r1, [r4, #0]
 80016b4:	e7ed      	b.n	8001692 <_free_r+0x1e>
 80016b6:	461a      	mov	r2, r3
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	b10b      	cbz	r3, 80016c0 <_free_r+0x4c>
 80016bc:	42a3      	cmp	r3, r4
 80016be:	d9fa      	bls.n	80016b6 <_free_r+0x42>
 80016c0:	6811      	ldr	r1, [r2, #0]
 80016c2:	1850      	adds	r0, r2, r1
 80016c4:	42a0      	cmp	r0, r4
 80016c6:	d10b      	bne.n	80016e0 <_free_r+0x6c>
 80016c8:	6820      	ldr	r0, [r4, #0]
 80016ca:	4401      	add	r1, r0
 80016cc:	1850      	adds	r0, r2, r1
 80016ce:	4283      	cmp	r3, r0
 80016d0:	6011      	str	r1, [r2, #0]
 80016d2:	d1e0      	bne.n	8001696 <_free_r+0x22>
 80016d4:	6818      	ldr	r0, [r3, #0]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	6053      	str	r3, [r2, #4]
 80016da:	4408      	add	r0, r1
 80016dc:	6010      	str	r0, [r2, #0]
 80016de:	e7da      	b.n	8001696 <_free_r+0x22>
 80016e0:	d902      	bls.n	80016e8 <_free_r+0x74>
 80016e2:	230c      	movs	r3, #12
 80016e4:	602b      	str	r3, [r5, #0]
 80016e6:	e7d6      	b.n	8001696 <_free_r+0x22>
 80016e8:	6820      	ldr	r0, [r4, #0]
 80016ea:	1821      	adds	r1, r4, r0
 80016ec:	428b      	cmp	r3, r1
 80016ee:	bf04      	itt	eq
 80016f0:	6819      	ldreq	r1, [r3, #0]
 80016f2:	685b      	ldreq	r3, [r3, #4]
 80016f4:	6063      	str	r3, [r4, #4]
 80016f6:	bf04      	itt	eq
 80016f8:	1809      	addeq	r1, r1, r0
 80016fa:	6021      	streq	r1, [r4, #0]
 80016fc:	6054      	str	r4, [r2, #4]
 80016fe:	e7ca      	b.n	8001696 <_free_r+0x22>
 8001700:	bd38      	pop	{r3, r4, r5, pc}
 8001702:	bf00      	nop
 8001704:	200001c0 	.word	0x200001c0

08001708 <_init>:
 8001708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170a:	bf00      	nop
 800170c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800170e:	bc08      	pop	{r3}
 8001710:	469e      	mov	lr, r3
 8001712:	4770      	bx	lr

08001714 <_fini>:
 8001714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001716:	bf00      	nop
 8001718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171a:	bc08      	pop	{r3}
 800171c:	469e      	mov	lr, r3
 800171e:	4770      	bx	lr
